
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d4  080060d4  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060dc  080060dc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080060e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  20000030  08006114  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012d4  08006114  000212d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179e9  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003285  00000000  00000000  00037a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003acd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c0  00000000  00000000  0003c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ceb6  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ce4  00000000  00000000  0005a09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b276f  00000000  00000000  0006ad82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d4f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e9c  00000000  00000000  0011d56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fec 	.word	0x08005fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	08005fec 	.word	0x08005fec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000004c 	.word	0x2000004c
 8000500:	200000a0 	.word	0x200000a0

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fc68 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f84f 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fa09 	bl	8000928 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f8b5 	bl	8000684 <MX_TIM1_Init>
  MX_TIM15_Init();
 800051a:	f000 f983 	bl	8000824 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 800051e:	f000 f9d3 	bl	80008c8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of tareaControl */
  osThreadDef(tareaControl, control, osPriorityNormal, 0, 128);
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <main+0x94>)
 8000524:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tareaControlHandle = osThreadCreate(osThread(tareaControl), NULL);
 8000536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fd70 	bl	8004022 <osThreadCreate>
 8000542:	4602      	mov	r2, r0
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <main+0x98>)
 8000546:	601a      	str	r2, [r3, #0]

  /* definition and creation of tareaSensores */
  osThreadDef(tareaSensores, sensores, osPriorityNormal, 0, 128);
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <main+0x9c>)
 800054a:	f107 0420 	add.w	r4, r7, #32
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tareaSensoresHandle = osThreadCreate(osThread(tareaSensores), NULL);
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fd5d 	bl	8004022 <osThreadCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0xa0>)
 800056c:	601a      	str	r2, [r3, #0]

  /* definition and creation of tareaApi */
  osThreadDef(tareaApi, api, osPriorityNormal, 0, 128);
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <main+0xa4>)
 8000570:	1d3c      	adds	r4, r7, #4
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tareaApiHandle = osThreadCreate(osThread(tareaApi), NULL);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f003 fd4c 	bl	8004022 <osThreadCreate>
 800058a:	4602      	mov	r2, r0
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <main+0xa8>)
 800058e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f003 fd40 	bl	8004014 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x90>
 8000596:	bf00      	nop
 8000598:	08006014 	.word	0x08006014
 800059c:	200010b0 	.word	0x200010b0
 80005a0:	08006040 	.word	0x08006040
 80005a4:	200010b4 	.word	0x200010b4
 80005a8:	08006068 	.word	0x08006068
 80005ac:	20000fac 	.word	0x20000fac

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0a4      	sub	sp, #144	; 0x90
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fd0c 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fcfe 	bl	8005fdc <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e4:	f000 fec4 	bl	8001370 <HAL_PWREx_ControlVoltageScaling>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80005ee:	f000 fa3d 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f2:	2310      	movs	r3, #16
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005fe:	2360      	movs	r3, #96	; 0x60
 8000600:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000606:	2301      	movs	r3, #1
 8000608:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000610:	2328      	movs	r3, #40	; 0x28
 8000612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fef8 	bl	800141c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000632:	f000 fa1b 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2303      	movs	r3, #3
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064e:	2104      	movs	r1, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fb49 	bl	8001ce8 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800065c:	f000 fa06 	bl	8000a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000660:	2304      	movs	r3, #4
 8000662:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fd72 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000676:	f000 f9f9 	bl	8000a6c <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3790      	adds	r7, #144	; 0x90
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09a      	sub	sp, #104	; 0x68
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	222c      	movs	r2, #44	; 0x2c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fc8c 	bl	8005fdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c4:	4b55      	ldr	r3, [pc, #340]	; (800081c <MX_TIM1_Init+0x198>)
 80006c6:	4a56      	ldr	r2, [pc, #344]	; (8000820 <MX_TIM1_Init+0x19c>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 80006ca:	4b54      	ldr	r3, [pc, #336]	; (800081c <MX_TIM1_Init+0x198>)
 80006cc:	2250      	movs	r2, #80	; 0x50
 80006ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b52      	ldr	r3, [pc, #328]	; (800081c <MX_TIM1_Init+0x198>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006d6:	4b51      	ldr	r3, [pc, #324]	; (800081c <MX_TIM1_Init+0x198>)
 80006d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <MX_TIM1_Init+0x198>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e4:	4b4d      	ldr	r3, [pc, #308]	; (800081c <MX_TIM1_Init+0x198>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b4c      	ldr	r3, [pc, #304]	; (800081c <MX_TIM1_Init+0x198>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <MX_TIM1_Init+0x198>)
 80006f2:	f001 feb5 	bl	8002460 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006fc:	f000 f9b6 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800070a:	4619      	mov	r1, r3
 800070c:	4843      	ldr	r0, [pc, #268]	; (800081c <MX_TIM1_Init+0x198>)
 800070e:	f002 fa25 	bl	8002b5c <HAL_TIM_ConfigClockSource>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000718:	f000 f9a8 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071c:	483f      	ldr	r0, [pc, #252]	; (800081c <MX_TIM1_Init+0x198>)
 800071e:	f001 ff1f 	bl	8002560 <HAL_TIM_PWM_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000728:	f000 f9a0 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000738:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073c:	4619      	mov	r1, r3
 800073e:	4837      	ldr	r0, [pc, #220]	; (800081c <MX_TIM1_Init+0x198>)
 8000740:	f002 fe90 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800074a:	f000 f98f 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074e:	2360      	movs	r3, #96	; 0x60
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	482a      	ldr	r0, [pc, #168]	; (800081c <MX_TIM1_Init+0x198>)
 8000774:	f002 f8da 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800077e:	f000 f975 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000786:	2204      	movs	r2, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <MX_TIM1_Init+0x198>)
 800078c:	f002 f8ce 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000796:	f000 f969 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079e:	2208      	movs	r2, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	481e      	ldr	r0, [pc, #120]	; (800081c <MX_TIM1_Init+0x198>)
 80007a4:	f002 f8c2 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007ae:	f000 f95d 	bl	8000a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b6:	220c      	movs	r2, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <MX_TIM1_Init+0x198>)
 80007bc:	f002 f8b6 	bl	800292c <HAL_TIM_PWM_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80007c6:	f000 f951 	bl	8000a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <MX_TIM1_Init+0x198>)
 8000800:	f002 fe96 	bl	8003530 <HAL_TIMEx_ConfigBreakDeadTime>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800080a:	f000 f92f 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_TIM1_Init+0x198>)
 8000810:	f000 f990 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 8000814:	bf00      	nop
 8000816:	3768      	adds	r7, #104	; 0x68
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20001070 	.word	0x20001070
 8000820:	40012c00 	.word	0x40012c00

08000824 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_TIM15_Init+0x9c>)
 8000844:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MX_TIM15_Init+0xa0>)
 8000846:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_TIM15_Init+0x9c>)
 800084a:	2250      	movs	r2, #80	; 0x50
 800084c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM15_Init+0x9c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM15_Init+0x9c>)
 8000856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM15_Init+0x9c>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM15_Init+0x9c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM15_Init+0x9c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_TIM15_Init+0x9c>)
 8000870:	f001 fdf6 	bl	8002460 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800087a:	f000 f8f7 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM15_Init+0x9c>)
 800088c:	f002 f966 	bl	8002b5c <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000896:	f000 f8e9 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM15_Init+0x9c>)
 80008a8:	f002 fddc 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80008b2:	f000 f8db 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20001030 	.word	0x20001030
 80008c4:	40014000 	.word	0x40014000

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART3_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART3_UART_Init+0x58>)
 800090c:	f002 fea6 	bl	800365c <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f8a9 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000fb0 	.word	0x20000fb0
 8000924:	40004800 	.word	0x40004800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a3d      	ldr	r2, [pc, #244]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x110>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a37      	ldr	r2, [pc, #220]	; (8000a38 <MX_GPIO_Init+0x110>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a31      	ldr	r2, [pc, #196]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_GPIO_Init+0x110>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a2b      	ldr	r2, [pc, #172]	; (8000a38 <MX_GPIO_Init+0x110>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x110>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2130      	movs	r1, #48	; 0x30
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fcbd 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PUL1_Pin PUL2_Pin PUL3_Pin */
  GPIO_InitStruct.Pin = PUL1_Pin|PUL2_Pin|PUL3_Pin;
 80009aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	481f      	ldr	r0, [pc, #124]	; (8000a3c <MX_GPIO_Init+0x114>)
 80009c0:	f000 fb26 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUL4_Pin */
  GPIO_InitStruct.Pin = PUL4_Pin;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUL4_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	481a      	ldr	r0, [pc, #104]	; (8000a40 <MX_GPIO_Init+0x118>)
 80009d8:	f000 fb1a 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80009dc:	2330      	movs	r3, #48	; 0x30
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f000 fb0b 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : S8_Pin */
  GPIO_InitStruct.Pin = S8_Pin;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S8_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fafe 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : S7_Pin S6_Pin S5_Pin S4_Pin 
                           S3_Pin S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S7_Pin|S6_Pin|S5_Pin|S4_Pin 
 8000a14:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000a18:	617b      	str	r3, [r7, #20]
                          |S3_Pin|S2_Pin|S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4806      	ldr	r0, [pc, #24]	; (8000a44 <MX_GPIO_Init+0x11c>)
 8000a2a:	f000 faf1 	bl	8001010 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	48001c00 	.word	0x48001c00
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 f9d9 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40001000 	.word	0x40001000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	f06f 0001 	mvn.w	r0, #1
 8000aba:	f000 fa7f 	bl	8000fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <HAL_TIM_Base_MspInit+0x5c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10c      	bne.n	8000af8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_TIM_Base_MspInit+0x60>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_TIM_Base_MspInit+0x60>)
 8000ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_TIM_Base_MspInit+0x60>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000af6:	e010      	b.n	8000b1a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM15)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_TIM_Base_MspInit+0x64>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d10b      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_TIM_Base_MspInit+0x60>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_TIM_Base_MspInit+0x60>)
 8000b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <HAL_TIM_Base_MspInit+0x60>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40014000 	.word	0x40014000

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <HAL_TIM_MspPostInit+0x68>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d11d      	bne.n	8000b92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_TIM_MspPostInit+0x6c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = MI1_Pin|MI2_Pin|MD1_Pin|MD2_Pin;
 8000b6e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 fa3f 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012c00 	.word	0x40012c00
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x7c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d128      	bne.n	8000c18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0x80>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_UART_MspInit+0x80>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0x80>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0x80>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_UART_MspInit+0x80>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_UART_MspInit+0x80>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_UART_MspInit+0x84>)
 8000c14:	f000 f9fc 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40004800 	.word	0x40004800
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000400 	.word	0x48000400

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2036      	movs	r0, #54	; 0x36
 8000c42:	f000 f9bb 	bl	8000fbc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8000c46:	2036      	movs	r0, #54	; 0x36
 8000c48:	f000 f9d4 	bl	8000ff4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_InitTick+0x9c>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_InitTick+0x9c>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6593      	str	r3, [r2, #88]	; 0x58
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_InitTick+0x9c>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c64:	f107 0210 	add.w	r2, r7, #16
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f9de 	bl	8002030 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c74:	f001 f9b0 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 8000c78:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_InitTick+0xa0>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0c9b      	lsrs	r3, r3, #18
 8000c84:	3b01      	subs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_InitTick+0xa8>)
 8000c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000caa:	f001 fbd9 	bl	8002460 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d104      	bne.n	8000cbe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_InitTick+0xa4>)
 8000cb6:	f001 fc29 	bl	800250c <HAL_TIM_Base_Start_IT>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	200010b8 	.word	0x200010b8
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM6_IRQHandler+0x10>)
 8000d12:	f001 fceb 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200010b8 	.word	0x200010b8

08000d20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <SystemInit+0x64>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <SystemInit+0x64>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <SystemInit+0x68>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <SystemInit+0x68>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <SystemInit+0x68>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <SystemInit+0x68>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <SystemInit+0x68>)
 8000d4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <SystemInit+0x68>)
 8000d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <SystemInit+0x68>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <SystemInit+0x68>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <SystemInit+0x68>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SystemInit+0x64>)
 8000d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d76:	609a      	str	r2, [r3, #8]
#endif
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	40021000 	.word	0x40021000

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
	ldr	r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8000db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db6:	f7ff ffb3 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f005 f8eb 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fba1 	bl	8000504 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000dc8:	080060e4 	.word	0x080060e4
	ldr	r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dd0:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8000dd4:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8000dd8:	200012d4 	.word	0x200012d4

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>

08000dde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f8dc 	bl	8000fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ff1c 	bl	8000c2c <HAL_InitTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e001      	b.n	8000e04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e00:	f7ff fe3c 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x20>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e20:	6013      	str	r3, [r2, #0]
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	200010f8 	.word	0x200010f8
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200010f8 	.word	0x200010f8

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff4c 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fce:	f7ff ff61 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	6978      	ldr	r0, [r7, #20]
 8000fda:	f7ff ffb1 	bl	8000f40 <NVIC_EncodePriority>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff80 	bl	8000eec <__NVIC_SetPriority>
}
 8000fec:	bf00      	nop
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff54 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e14e      	b.n	80012be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8140 	beq.w	80012b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d00b      	beq.n	8001058 <HAL_GPIO_Init+0x48>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d007      	beq.n	8001058 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104c:	2b11      	cmp	r3, #17
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b12      	cmp	r3, #18
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0xea>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b12      	cmp	r3, #18
 80010f8:	d123      	bne.n	8001142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	08da      	lsrs	r2, r3, #3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3208      	adds	r2, #8
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0203 	and.w	r2, r3, #3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809a 	beq.w	80012b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6613      	str	r3, [r2, #96]	; 0x60
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c6:	d013      	beq.n	80011f0 <HAL_GPIO_Init+0x1e0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a46      	ldr	r2, [pc, #280]	; (80012e4 <HAL_GPIO_Init+0x2d4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1dc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a45      	ldr	r2, [pc, #276]	; (80012e8 <HAL_GPIO_Init+0x2d8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1d8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1d4>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011e4:	2307      	movs	r3, #7
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011f0:	2300      	movs	r3, #0
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001202:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001210:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001234:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f aea9 	bne.w	8001020 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001340:	e002      	b.n	8001348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_PWREx_GetVoltageRange+0x18>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40007000 	.word	0x40007000

08001370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137e:	d130      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138c:	d038      	beq.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2232      	movs	r2, #50	; 0x32
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b4:	e002      	b.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c8:	d102      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f2      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013dc:	d110      	bne.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e00f      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d007      	beq.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f000 bc56 	b.w	8001cdc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001430:	4ba1      	ldr	r3, [pc, #644]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143a:	4b9f      	ldr	r3, [pc, #636]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80e6 	beq.w	800161e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <HAL_RCC_OscConfig+0x4c>
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	f040 808d 	bne.w	800157a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b01      	cmp	r3, #1
 8001464:	f040 8089 	bne.w	800157a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001468:	4b93      	ldr	r3, [pc, #588]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_RCC_OscConfig+0x66>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	f000 bc2d 	b.w	8001cdc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001486:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_RCC_OscConfig+0x80>
 8001492:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x8c>
 800149c:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d224      	bcs.n	80014f6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fdef 	bl	8002094 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	f000 bc0d 	b.w	8001cdc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c2:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7c      	ldr	r2, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	4977      	ldr	r1, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	4972      	ldr	r1, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	e025      	b.n	8001542 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6f      	ldr	r2, [pc, #444]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	496a      	ldr	r1, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	4965      	ldr	r1, [pc, #404]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fdae 	bl	8002094 <RCC_SetFlashLatencyFromMSIRange>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e3cc      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001542:	f000 fcb3 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001546:	4601      	mov	r1, r0
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a5a      	ldr	r2, [pc, #360]	; (80016bc <HAL_RCC_OscConfig+0x2a0>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	fa21 f303 	lsr.w	r3, r1, r3
 800155e:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x2a4>)
 8001560:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x2a8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fb60 	bl	8000c2c <HAL_InitTick>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d052      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	e3b0      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d032      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158e:	f7ff fc51 	bl	8000e34 <HAL_GetTick>
 8001592:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001596:	f7ff fc4d 	bl	8000e34 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e399      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a3f      	ldr	r2, [pc, #252]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	493a      	ldr	r1, [pc, #232]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	4935      	ldr	r1, [pc, #212]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
 80015e6:	e01a      	b.n	800161e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc1e 	bl	8000e34 <HAL_GetTick>
 80015f8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc1a 	bl	8000e34 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e366      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1e0>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d073      	beq.n	8001712 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d063      	beq.n	8001710 <HAL_RCC_OscConfig+0x2f4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d15f      	bne.n	8001710 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e343      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x250>
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0x28c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x274>
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x28c>
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_RCC_OscConfig+0x29c>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fbc0 	bl	8000e34 <HAL_GetTick>
 80016b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b6:	e010      	b.n	80016da <HAL_RCC_OscConfig+0x2be>
 80016b8:	40021000 	.word	0x40021000
 80016bc:	0800608c 	.word	0x0800608c
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fbb4 	bl	8000e34 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e300      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4ba0      	ldr	r3, [pc, #640]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2ac>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fba4 	bl	8000e34 <HAL_GetTick>
 80016ec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fba0 	bl	8000e34 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e2ec      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d005      	beq.n	8001730 <HAL_RCC_OscConfig+0x314>
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d119      	bne.n	800175e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b8a      	ldr	r3, [pc, #552]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x32c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e2c9      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4981      	ldr	r1, [pc, #516]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	e040      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001766:	4b7d      	ldr	r3, [pc, #500]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7c      	ldr	r2, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fb5f 	bl	8000e34 <HAL_GetTick>
 8001776:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fb5b 	bl	8000e34 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e2a7      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	496d      	ldr	r1, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb3b 	bl	8000e34 <HAL_GetTick>
 80017be:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fb37 	bl	8000e34 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e283      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	4b61      	ldr	r3, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d07f      	beq.n	80018ec <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d05f      	beq.n	80018b4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	429a      	cmp	r2, r3
 8001808:	d037      	beq.n	800187a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e25c      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800183c:	f7ff fafa 	bl	8000e34 <HAL_GetTick>
 8001840:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff faf6 	bl	8000e34 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b11      	cmp	r3, #17
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e242      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ef      	bne.n	8001844 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186a:	f023 0210 	bic.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	493a      	ldr	r1, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001874:	4313      	orrs	r3, r2
 8001876:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fad3 	bl	8000e34 <HAL_GetTick>
 800188e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001892:	f7ff facf 	bl	8000e34 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b11      	cmp	r3, #17
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e21b      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0ef      	beq.n	8001892 <HAL_RCC_OscConfig+0x476>
 80018b2:	e01b      	b.n	80018ec <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ba:	4a28      	ldr	r2, [pc, #160]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fab6 	bl	8000e34 <HAL_GetTick>
 80018c8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fab2 	bl	8000e34 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b11      	cmp	r3, #17
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1fe      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_RCC_OscConfig+0x540>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ef      	bne.n	80018cc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80c1 	beq.w	8001a7c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_RCC_OscConfig+0x540>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_OscConfig+0x540>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_OscConfig+0x544>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11c      	bne.n	8001970 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_OscConfig+0x544>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_RCC_OscConfig+0x544>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff fa77 	bl	8000e34 <HAL_GetTick>
 8001946:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001948:	e00c      	b.n	8001964 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff fa73 	bl	8000e34 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d905      	bls.n	8001964 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1bf      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
 800195c:	40021000 	.word	0x40021000
 8001960:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001964:	4bb1      	ldr	r3, [pc, #708]	; (8001c2c <HAL_RCC_OscConfig+0x810>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ec      	beq.n	800194a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d02c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800197c:	4bac      	ldr	r3, [pc, #688]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	49a8      	ldr	r1, [pc, #672]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001990:	4313      	orrs	r3, r2
 8001992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a2:	4ba3      	ldr	r3, [pc, #652]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a8:	4aa1      	ldr	r2, [pc, #644]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019b2:	4b9f      	ldr	r3, [pc, #636]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b8:	4a9d      	ldr	r2, [pc, #628]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c2:	e018      	b.n	80019f6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019c4:	4b9a      	ldr	r3, [pc, #616]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	4a99      	ldr	r2, [pc, #612]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d4:	e00f      	b.n	80019f6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019d6:	4b96      	ldr	r3, [pc, #600]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019dc:	4a94      	ldr	r2, [pc, #592]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019e6:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ec:	4a90      	ldr	r2, [pc, #576]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 80019ee:	f023 0304 	bic.w	r3, r3, #4
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff fa19 	bl	8000e34 <HAL_GetTick>
 8001a02:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fa15 	bl	8000e34 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e15f      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1c:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ed      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5ea>
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fa02 	bl	8000e34 <HAL_GetTick>
 8001a30:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f9fe 	bl	8000e34 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e148      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4a:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ed      	bne.n	8001a34 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a58:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a74      	ldr	r2, [pc, #464]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d03c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01c      	beq.n	8001aca <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a90:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a96:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f9c8 	bl	8000e34 <HAL_GetTick>
 8001aa4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa8:	f7ff f9c4 	bl	8000e34 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e110      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ef      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x68c>
 8001ac8:	e01b      	b.n	8001b02 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff f9ab 	bl	8000e34 <HAL_GetTick>
 8001ade:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae2:	f7ff f9a7 	bl	8000e34 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0f3      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af4:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ef      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80e7 	beq.w	8001cda <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 80b7 	bne.w	8001c84 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d124      	bne.n	8001b74 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	3b01      	subs	r3, #1
 8001b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d113      	bne.n	8001b74 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d061      	beq.n	8001c38 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d056      	beq.n	8001c28 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b86:	f7ff f955 	bl	8000e34 <HAL_GetTick>
 8001b8a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f951 	bl	8000e34 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e09d      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_OscConfig+0x818>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	0552      	lsls	r2, r2, #21
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bda:	0852      	lsrs	r2, r2, #1
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0652      	lsls	r2, r2, #25
 8001be0:	430a      	orrs	r2, r1
 8001be2:	4913      	ldr	r1, [pc, #76]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c00:	f7ff f918 	bl	8000e34 <HAL_GetTick>
 8001c04:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f914 	bl	8000e34 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e060      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_OscConfig+0x814>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c26:	e058      	b.n	8001cda <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e057      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d14a      	bne.n	8001cda <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a23      	ldr	r2, [pc, #140]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c5c:	f7ff f8ea 	bl	8000e34 <HAL_GetTick>
 8001c60:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f8e6 	bl	8000e34 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e032      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x848>
 8001c82:	e02a      	b.n	8001cda <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d025      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c94:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001ca8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff f8c1 	bl	8000e34 <HAL_GetTick>
 8001cb2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff f8bd 	bl	8000e34 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x8c8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x89a>
 8001cd4:	e001      	b.n	8001cda <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0c8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d910      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 0207 	bic.w	r2, r3, #7
 8001d12:	4961      	ldr	r1, [pc, #388]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b0      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d04c      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d40:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d121      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e09e      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d115      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e092      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d70:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e086      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d80:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e07e      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d90:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 0203 	bic.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	493f      	ldr	r1, [pc, #252]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da2:	f7ff f847 	bl	8000e34 <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7ff f843 	bl	8000e34 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e066      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 020c 	and.w	r2, r3, #12
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d1eb      	bne.n	8001daa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	492c      	ldr	r1, [pc, #176]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d210      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4924      	ldr	r1, [pc, #144]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e036      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4918      	ldr	r1, [pc, #96]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4910      	ldr	r1, [pc, #64]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e5e:	f000 f825 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e62:	4601      	mov	r1, r0
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	fa21 f303 	lsr.w	r3, r1, r3
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fed2 	bl	8000c2c <HAL_InitTick>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	0800608c 	.word	0x0800608c
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d121      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d11e      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ee0:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e005      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f08:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e004      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d133      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0xaa>
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f52:	617b      	str	r3, [r7, #20]
      break;
 8001f54:	e005      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f58:	617b      	str	r3, [r7, #20]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	617b      	str	r3, [r7, #20]
      break;
 8001f60:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	fb02 f203 	mul.w	r2, r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0e5b      	lsrs	r3, r3, #25
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	080060a4 	.word	0x080060a4
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	007a1200 	.word	0x007a1200

08001fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fdc:	f7ff fff0 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	0800609c 	.word	0x0800609c

08002004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002008:	f7ff ffda 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 800200c:	4601      	mov	r1, r0
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0adb      	lsrs	r3, r3, #11
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_RCC_GetPCLK2Freq+0x28>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	0800609c 	.word	0x0800609c

08002030 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	220f      	movs	r2, #15
 800203e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_GetClockConfig+0x5c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_RCC_GetClockConfig+0x5c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_RCC_GetClockConfig+0x5c>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_GetClockConfig+0x5c>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	08db      	lsrs	r3, r3, #3
 800206a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCC_GetClockConfig+0x60>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0207 	and.w	r2, r3, #7
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	601a      	str	r2, [r3, #0]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	40022000 	.word	0x40022000

08002094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020ac:	f7ff f952 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 80020b0:	6178      	str	r0, [r7, #20]
 80020b2:	e014      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6593      	str	r3, [r2, #88]	; 0x58
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020cc:	f7ff f942 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 80020d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d10b      	bne.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d919      	bls.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2ba0      	cmp	r3, #160	; 0xa0
 80020f0:	d902      	bls.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f2:	2302      	movs	r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e013      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f8:	2301      	movs	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e010      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d902      	bls.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002104:	2303      	movs	r3, #3
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e00a      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d102      	bne.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002110:	2302      	movs	r3, #2
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e004      	b.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b70      	cmp	r3, #112	; 0x70
 800211a:	d101      	bne.n	8002120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800211c:	2301      	movs	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 0207 	bic.w	r2, r3, #7
 8002128:	4909      	ldr	r1, [pc, #36]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800215c:	2300      	movs	r3, #0
 800215e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002160:	2300      	movs	r3, #0
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 809e 	beq.w	80022ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fe3e 	bl	8000e34 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fe3a 	bl	8000e34 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	74fb      	strb	r3, [r7, #19]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15a      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01e      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d019      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d016      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fdfa 	bl	8000e34 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	e00b      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe fdf6 	bl	8000e34 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d902      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	74fb      	strb	r3, [r7, #19]
            break;
 800225a:	e006      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ec      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229c:	7c7b      	ldrb	r3, [r7, #17]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b6e      	ldr	r3, [pc, #440]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a6d      	ldr	r2, [pc, #436]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ba:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 0203 	bic.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4964      	ldr	r1, [pc, #400]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022dc:	4b5f      	ldr	r3, [pc, #380]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	495c      	ldr	r1, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4953      	ldr	r1, [pc, #332]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b4e      	ldr	r3, [pc, #312]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	494b      	ldr	r1, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4942      	ldr	r1, [pc, #264]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	493a      	ldr	r1, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4931      	ldr	r1, [pc, #196]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4929      	ldr	r1, [pc, #164]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4920      	ldr	r1, [pc, #128]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	4918      	ldr	r1, [pc, #96]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	490a      	ldr	r1, [pc, #40]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002442:	d105      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002450:	7cbb      	ldrb	r3, [r7, #18]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e01d      	b.n	80024ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fb20 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 fc3e 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_TIM_Base_Start+0x50>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d00b      	beq.n	80024f2 <HAL_TIM_Base_Start+0x3a>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d007      	beq.n	80024f2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	00010007 	.word	0x00010007

0800250c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_TIM_Base_Start_IT+0x50>)
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b06      	cmp	r3, #6
 8002534:	d00b      	beq.n	800254e <HAL_TIM_Base_Start_IT+0x42>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d007      	beq.n	800254e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	00010007 	.word	0x00010007

08002560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e01d      	b.n	80025ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f815 	bl	80025b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 fbbe 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d841      	bhi.n	8002660 <HAL_TIM_PWM_Start_IT+0x94>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_TIM_PWM_Start_IT+0x18>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002619 	.word	0x08002619
 80025e8:	08002661 	.word	0x08002661
 80025ec:	08002661 	.word	0x08002661
 80025f0:	08002661 	.word	0x08002661
 80025f4:	0800262b 	.word	0x0800262b
 80025f8:	08002661 	.word	0x08002661
 80025fc:	08002661 	.word	0x08002661
 8002600:	08002661 	.word	0x08002661
 8002604:	0800263d 	.word	0x0800263d
 8002608:	08002661 	.word	0x08002661
 800260c:	08002661 	.word	0x08002661
 8002610:	08002661 	.word	0x08002661
 8002614:	0800264f 	.word	0x0800264f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0202 	orr.w	r2, r2, #2
 8002626:	60da      	str	r2, [r3, #12]
      break;
 8002628:	e01b      	b.n	8002662 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0204 	orr.w	r2, r2, #4
 8002638:	60da      	str	r2, [r3, #12]
      break;
 800263a:	e012      	b.n	8002662 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	60da      	str	r2, [r3, #12]
      break;
 800264c:	e009      	b.n	8002662 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0210 	orr.w	r2, r2, #16
 800265c:	60da      	str	r2, [r3, #12]
      break;
 800265e:	e000      	b.n	8002662 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002660:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fed4 	bl	8003418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_TIM_PWM_Start_IT+0x110>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_TIM_PWM_Start_IT+0xc2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_TIM_PWM_Start_IT+0x114>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_TIM_PWM_Start_IT+0xc2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_TIM_PWM_Start_IT+0x118>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_TIM_PWM_Start_IT+0xc6>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_TIM_PWM_Start_IT+0xc8>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_TIM_PWM_Start_IT+0xdc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_TIM_PWM_Start_IT+0x11c>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d00b      	beq.n	80026d2 <HAL_TIM_PWM_Start_IT+0x106>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d007      	beq.n	80026d2 <HAL_TIM_PWM_Start_IT+0x106>
  {
    __HAL_TIM_ENABLE(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40014000 	.word	0x40014000
 80026e4:	40014400 	.word	0x40014400
 80026e8:	00010007 	.word	0x00010007

080026ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0202 	mvn.w	r2, #2
 8002718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fad7 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fac9 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fada 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 faad 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa9f 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fab0 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0208 	mvn.w	r2, #8
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2204      	movs	r2, #4
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa83 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fa75 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fa86 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d122      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d11b      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2208      	movs	r2, #8
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa59 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa4b 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa5c 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0201 	mvn.w	r2, #1
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe f8ec 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fecc 	bl	8003634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	d10e      	bne.n	80028ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 febf 	bl	8003648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d10e      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d107      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fa0a 	bl	8002d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b20      	cmp	r3, #32
 8002902:	d10e      	bne.n	8002922 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d107      	bne.n	8002922 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f06f 0220 	mvn.w	r2, #32
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fe7f 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e105      	b.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b14      	cmp	r3, #20
 800295a:	f200 80f0 	bhi.w	8002b3e <HAL_TIM_PWM_ConfigChannel+0x212>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	080029b9 	.word	0x080029b9
 8002968:	08002b3f 	.word	0x08002b3f
 800296c:	08002b3f 	.word	0x08002b3f
 8002970:	08002b3f 	.word	0x08002b3f
 8002974:	080029f9 	.word	0x080029f9
 8002978:	08002b3f 	.word	0x08002b3f
 800297c:	08002b3f 	.word	0x08002b3f
 8002980:	08002b3f 	.word	0x08002b3f
 8002984:	08002a3b 	.word	0x08002a3b
 8002988:	08002b3f 	.word	0x08002b3f
 800298c:	08002b3f 	.word	0x08002b3f
 8002990:	08002b3f 	.word	0x08002b3f
 8002994:	08002a7b 	.word	0x08002a7b
 8002998:	08002b3f 	.word	0x08002b3f
 800299c:	08002b3f 	.word	0x08002b3f
 80029a0:	08002b3f 	.word	0x08002b3f
 80029a4:	08002abd 	.word	0x08002abd
 80029a8:	08002b3f 	.word	0x08002b3f
 80029ac:	08002b3f 	.word	0x08002b3f
 80029b0:	08002b3f 	.word	0x08002b3f
 80029b4:	08002afd 	.word	0x08002afd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fa12 	bl	8002de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0208 	orr.w	r2, r2, #8
 80029d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6999      	ldr	r1, [r3, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	619a      	str	r2, [r3, #24]
      break;
 80029f6:	e0a3      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fa6e 	bl	8002ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6999      	ldr	r1, [r3, #24]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	619a      	str	r2, [r3, #24]
      break;
 8002a38:	e082      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fac7 	bl	8002fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0208 	orr.w	r2, r2, #8
 8002a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0204 	bic.w	r2, r2, #4
 8002a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69d9      	ldr	r1, [r3, #28]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
      break;
 8002a78:	e062      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fb1f 	bl	80030c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69d9      	ldr	r1, [r3, #28]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	021a      	lsls	r2, r3, #8
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	61da      	str	r2, [r3, #28]
      break;
 8002aba:	e041      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fb5c 	bl	8003180 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0208 	orr.w	r2, r2, #8
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002afa:	e021      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fb94 	bl	8003230 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b3c:	e000      	b.n	8002b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002b3e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop

08002b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIM_ConfigClockSource+0x18>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0a8      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d067      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x124>
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d80b      	bhi.n	8002bcc <HAL_TIM_ConfigClockSource+0x70>
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d073      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x144>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d802      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x66>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d06f      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002bc0:	e078      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x144>
 8002bc6:	2b30      	cmp	r3, #48	; 0x30
 8002bc8:	d06a      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002bca:	e073      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d00d      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0x90>
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d804      	bhi.n	8002bde <HAL_TIM_ConfigClockSource+0x82>
 8002bd4:	2b50      	cmp	r3, #80	; 0x50
 8002bd6:	d033      	beq.n	8002c40 <HAL_TIM_ConfigClockSource+0xe4>
 8002bd8:	2b60      	cmp	r3, #96	; 0x60
 8002bda:	d041      	beq.n	8002c60 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002bdc:	e06a      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be2:	d066      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be8:	d017      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002bea:	e063      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6899      	ldr	r1, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f000 fbec 	bl	80033d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
      break;
 8002c18:	e04c      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f000 fbd5 	bl	80033d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3c:	609a      	str	r2, [r3, #8]
      break;
 8002c3e:	e039      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f000 fb49 	bl	80032e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2150      	movs	r1, #80	; 0x50
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fba2 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002c5e:	e029      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f000 fb68 	bl	8003342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2160      	movs	r1, #96	; 0x60
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fb92 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002c7e:	e019      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f000 fb29 	bl	80032e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb82 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002c9e:	e009      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fb79 	bl	80033a2 <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e000      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <TIM_Base_SetConfig+0xbc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x20>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <TIM_Base_SetConfig+0xbc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_Base_SetConfig+0x52>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d007      	beq.n	8002d72 <TIM_Base_SetConfig+0x52>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <TIM_Base_SetConfig+0xc0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_Base_SetConfig+0x52>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <TIM_Base_SetConfig+0xc4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <TIM_Base_SetConfig+0xbc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_Base_SetConfig+0xa0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <TIM_Base_SetConfig+0xc0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <TIM_Base_SetConfig+0xc4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	615a      	str	r2, [r3, #20]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40014000 	.word	0x40014000
 8002de4:	40014400 	.word	0x40014400

08002de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f023 0302 	bic.w	r3, r3, #2
 8002e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <TIM_OC1_SetConfig+0xec>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_OC1_SetConfig+0x70>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <TIM_OC1_SetConfig+0xf0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_OC1_SetConfig+0x70>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a22      	ldr	r2, [pc, #136]	; (8002edc <TIM_OC1_SetConfig+0xf4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10c      	bne.n	8002e72 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f023 0308 	bic.w	r3, r3, #8
 8002e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <TIM_OC1_SetConfig+0xec>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <TIM_OC1_SetConfig+0xa2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <TIM_OC1_SetConfig+0xf0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_OC1_SetConfig+0xa2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <TIM_OC1_SetConfig+0xf4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d111      	bne.n	8002eae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	621a      	str	r2, [r3, #32]
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400

08002ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0210 	bic.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0320 	bic.w	r3, r3, #32
 8002f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <TIM_OC2_SetConfig+0xe8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10d      	bne.n	8002f60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <TIM_OC2_SetConfig+0xe8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <TIM_OC2_SetConfig+0x98>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <TIM_OC2_SetConfig+0xec>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_OC2_SetConfig+0x98>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <TIM_OC2_SetConfig+0xf0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d113      	bne.n	8002fa0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400

08002fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <TIM_OC3_SetConfig+0xe4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10d      	bne.n	8003052 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <TIM_OC3_SetConfig+0xe4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <TIM_OC3_SetConfig+0x96>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <TIM_OC3_SetConfig+0xe8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_OC3_SetConfig+0x96>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <TIM_OC3_SetConfig+0xec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d113      	bne.n	8003092 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400

080030c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	031b      	lsls	r3, r3, #12
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <TIM_OC4_SetConfig+0xb0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <TIM_OC4_SetConfig+0x74>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <TIM_OC4_SetConfig+0xb4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <TIM_OC4_SetConfig+0x74>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <TIM_OC4_SetConfig+0xb8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d109      	bne.n	800314c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800313e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400

08003180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <TIM_OC5_SetConfig+0xa4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <TIM_OC5_SetConfig+0x6a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a12      	ldr	r2, [pc, #72]	; (8003228 <TIM_OC5_SetConfig+0xa8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_OC5_SetConfig+0x6a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <TIM_OC5_SetConfig+0xac>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d109      	bne.n	80031fe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	621a      	str	r2, [r3, #32]
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400

08003230 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <TIM_OC6_SetConfig+0xa8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_OC6_SetConfig+0x6c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <TIM_OC6_SetConfig+0xac>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC6_SetConfig+0x6c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <TIM_OC6_SetConfig+0xb0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d109      	bne.n	80032b0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400

080032e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 0201 	bic.w	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800330e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 030a 	bic.w	r3, r3, #10
 8003320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0210 	bic.w	r2, r3, #16
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800336c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	031b      	lsls	r3, r3, #12
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800337e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f043 0307 	orr.w	r3, r3, #7
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e04f      	b.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a21      	ldr	r2, [pc, #132]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d004      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a10      	ldr	r2, [pc, #64]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10c      	bne.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40014000 	.word	0x40014000

08003530 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003548:	2302      	movs	r3, #2
 800354a:	e060      	b.n	800360e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d115      	bne.n	80035fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	051b      	lsls	r3, r3, #20
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e040      	b.n	80036f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd fa90 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f82c 	bl	80036f8 <UART_SetConfig>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fb34 	bl	8003d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fbbb 	bl	8003e64 <UART_CheckIdleState>
 80036ee:	4603      	mov	r3, r0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4bbc      	ldr	r3, [pc, #752]	; (8003a20 <UART_SetConfig+0x328>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003736:	430b      	orrs	r3, r1
 8003738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4ab2      	ldr	r2, [pc, #712]	; (8003a24 <UART_SetConfig+0x32c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	4313      	orrs	r3, r2
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4aa9      	ldr	r2, [pc, #676]	; (8003a28 <UART_SetConfig+0x330>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d126      	bne.n	80037d6 <UART_SetConfig+0xde>
 8003788:	4ba8      	ldr	r3, [pc, #672]	; (8003a2c <UART_SetConfig+0x334>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b03      	cmp	r3, #3
 8003794:	d81a      	bhi.n	80037cc <UART_SetConfig+0xd4>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0xa4>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037ad 	.word	0x080037ad
 80037a0:	080037bd 	.word	0x080037bd
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037c5 	.word	0x080037c5
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e0ab      	b.n	800390c <UART_SetConfig+0x214>
 80037b4:	2302      	movs	r3, #2
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e0a7      	b.n	800390c <UART_SetConfig+0x214>
 80037bc:	2304      	movs	r3, #4
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e0a3      	b.n	800390c <UART_SetConfig+0x214>
 80037c4:	2308      	movs	r3, #8
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e09f      	b.n	800390c <UART_SetConfig+0x214>
 80037cc:	2310      	movs	r3, #16
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	bf00      	nop
 80037d4:	e09a      	b.n	800390c <UART_SetConfig+0x214>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a95      	ldr	r2, [pc, #596]	; (8003a30 <UART_SetConfig+0x338>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d138      	bne.n	8003852 <UART_SetConfig+0x15a>
 80037e0:	4b92      	ldr	r3, [pc, #584]	; (8003a2c <UART_SetConfig+0x334>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d82c      	bhi.n	8003848 <UART_SetConfig+0x150>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <UART_SetConfig+0xfc>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003849 	.word	0x08003849
 80037fc:	08003849 	.word	0x08003849
 8003800:	08003849 	.word	0x08003849
 8003804:	08003839 	.word	0x08003839
 8003808:	08003849 	.word	0x08003849
 800380c:	08003849 	.word	0x08003849
 8003810:	08003849 	.word	0x08003849
 8003814:	08003831 	.word	0x08003831
 8003818:	08003849 	.word	0x08003849
 800381c:	08003849 	.word	0x08003849
 8003820:	08003849 	.word	0x08003849
 8003824:	08003841 	.word	0x08003841
 8003828:	2300      	movs	r3, #0
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382e:	e06d      	b.n	800390c <UART_SetConfig+0x214>
 8003830:	2302      	movs	r3, #2
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003836:	e069      	b.n	800390c <UART_SetConfig+0x214>
 8003838:	2304      	movs	r3, #4
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e065      	b.n	800390c <UART_SetConfig+0x214>
 8003840:	2308      	movs	r3, #8
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e061      	b.n	800390c <UART_SetConfig+0x214>
 8003848:	2310      	movs	r3, #16
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	bf00      	nop
 8003850:	e05c      	b.n	800390c <UART_SetConfig+0x214>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a77      	ldr	r2, [pc, #476]	; (8003a34 <UART_SetConfig+0x33c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d125      	bne.n	80038a8 <UART_SetConfig+0x1b0>
 800385c:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <UART_SetConfig+0x334>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003866:	2b10      	cmp	r3, #16
 8003868:	d011      	beq.n	800388e <UART_SetConfig+0x196>
 800386a:	2b10      	cmp	r3, #16
 800386c:	d802      	bhi.n	8003874 <UART_SetConfig+0x17c>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <UART_SetConfig+0x186>
 8003872:	e014      	b.n	800389e <UART_SetConfig+0x1a6>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d006      	beq.n	8003886 <UART_SetConfig+0x18e>
 8003878:	2b30      	cmp	r3, #48	; 0x30
 800387a:	d00c      	beq.n	8003896 <UART_SetConfig+0x19e>
 800387c:	e00f      	b.n	800389e <UART_SetConfig+0x1a6>
 800387e:	2300      	movs	r3, #0
 8003880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003884:	e042      	b.n	800390c <UART_SetConfig+0x214>
 8003886:	2302      	movs	r3, #2
 8003888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388c:	e03e      	b.n	800390c <UART_SetConfig+0x214>
 800388e:	2304      	movs	r3, #4
 8003890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003894:	e03a      	b.n	800390c <UART_SetConfig+0x214>
 8003896:	2308      	movs	r3, #8
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389c:	e036      	b.n	800390c <UART_SetConfig+0x214>
 800389e:	2310      	movs	r3, #16
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	bf00      	nop
 80038a6:	e031      	b.n	800390c <UART_SetConfig+0x214>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <UART_SetConfig+0x32c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d129      	bne.n	8003906 <UART_SetConfig+0x20e>
 80038b2:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <UART_SetConfig+0x334>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d014      	beq.n	80038ec <UART_SetConfig+0x1f4>
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d802      	bhi.n	80038ce <UART_SetConfig+0x1d6>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <UART_SetConfig+0x1e4>
 80038cc:	e016      	b.n	80038fc <UART_SetConfig+0x204>
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	d007      	beq.n	80038e4 <UART_SetConfig+0x1ec>
 80038d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d8:	d00c      	beq.n	80038f4 <UART_SetConfig+0x1fc>
 80038da:	e00f      	b.n	80038fc <UART_SetConfig+0x204>
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e013      	b.n	800390c <UART_SetConfig+0x214>
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x214>
 80038ec:	2304      	movs	r3, #4
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e00b      	b.n	800390c <UART_SetConfig+0x214>
 80038f4:	2308      	movs	r3, #8
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e007      	b.n	800390c <UART_SetConfig+0x214>
 80038fc:	2310      	movs	r3, #16
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <UART_SetConfig+0x214>
 8003906:	2310      	movs	r3, #16
 8003908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a44      	ldr	r2, [pc, #272]	; (8003a24 <UART_SetConfig+0x32c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	f040 80fb 	bne.w	8003b0e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800391c:	2b08      	cmp	r3, #8
 800391e:	d824      	bhi.n	800396a <UART_SetConfig+0x272>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x230>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800394d 	.word	0x0800394d
 800392c:	0800396b 	.word	0x0800396b
 8003930:	08003955 	.word	0x08003955
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800395b 	.word	0x0800395b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800396b 	.word	0x0800396b
 8003948:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe fb44 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 8003950:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003952:	e00d      	b.n	8003970 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003954:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <UART_SetConfig+0x340>)
 8003956:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003958:	e00a      	b.n	8003970 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe faa7 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 800395e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003960:	e006      	b.n	8003970 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003968:	e002      	b.n	8003970 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	76fb      	strb	r3, [r7, #27]
        break;
 800396e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 81c8 	beq.w	8003d08 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	d305      	bcc.n	8003994 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d902      	bls.n	800399a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	76fb      	strb	r3, [r7, #27]
 8003998:	e1b6      	b.n	8003d08 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800399a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800399e:	2b08      	cmp	r3, #8
 80039a0:	f200 80a2 	bhi.w	8003ae8 <UART_SetConfig+0x3f0>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x2b4>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	08003ae9 	.word	0x08003ae9
 80039b4:	08003a3d 	.word	0x08003a3d
 80039b8:	08003ae9 	.word	0x08003ae9
 80039bc:	08003a71 	.word	0x08003a71
 80039c0:	08003ae9 	.word	0x08003ae9
 80039c4:	08003ae9 	.word	0x08003ae9
 80039c8:	08003ae9 	.word	0x08003ae9
 80039cc:	08003abf 	.word	0x08003abf
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fb02 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 80039d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4619      	mov	r1, r3
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	0214      	lsls	r4, r2, #8
 80039e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039ec:	020b      	lsls	r3, r1, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	0852      	lsrs	r2, r2, #1
 80039f4:	4611      	mov	r1, r2
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	eb13 0b01 	adds.w	fp, r3, r1
 80039fe:	eb44 0c02 	adc.w	ip, r4, r2
 8003a02:	4658      	mov	r0, fp
 8003a04:	4661      	mov	r1, ip
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f04f 0400 	mov.w	r4, #0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4623      	mov	r3, r4
 8003a12:	f7fc fbdd 	bl	80001d0 <__aeabi_uldivmod>
 8003a16:	4603      	mov	r3, r0
 8003a18:	460c      	mov	r4, r1
 8003a1a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a1c:	e067      	b.n	8003aee <UART_SetConfig+0x3f6>
 8003a1e:	bf00      	nop
 8003a20:	efff69f3 	.word	0xefff69f3
 8003a24:	40008000 	.word	0x40008000
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40004400 	.word	0x40004400
 8003a34:	40004800 	.word	0x40004800
 8003a38:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	f04f 0400 	mov.w	r4, #0
 8003a46:	49ae      	ldr	r1, [pc, #696]	; (8003d00 <UART_SetConfig+0x608>)
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	eb13 0b01 	adds.w	fp, r3, r1
 8003a50:	eb44 0c02 	adc.w	ip, r4, r2
 8003a54:	4658      	mov	r0, fp
 8003a56:	4661      	mov	r1, ip
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f04f 0400 	mov.w	r4, #0
 8003a60:	461a      	mov	r2, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	f7fc fbb4 	bl	80001d0 <__aeabi_uldivmod>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003a6e:	e03e      	b.n	8003aee <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003a70:	f7fe fa1c 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003a74:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	f04f 0400 	mov.w	r4, #0
 8003a86:	0214      	lsls	r4, r2, #8
 8003a88:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a8c:	020b      	lsls	r3, r1, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6852      	ldr	r2, [r2, #4]
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	4611      	mov	r1, r2
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	eb13 0b01 	adds.w	fp, r3, r1
 8003a9e:	eb44 0c02 	adc.w	ip, r4, r2
 8003aa2:	4658      	mov	r0, fp
 8003aa4:	4661      	mov	r1, ip
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	f7fc fb8d 	bl	80001d0 <__aeabi_uldivmod>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	460c      	mov	r4, r1
 8003aba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003abc:	e017      	b.n	8003aee <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003acc:	f144 0100 	adc.w	r1, r4, #0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f04f 0400 	mov.w	r4, #0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	f7fc fb78 	bl	80001d0 <__aeabi_uldivmod>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ae6:	e002      	b.n	8003aee <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	76fb      	strb	r3, [r7, #27]
            break;
 8003aec:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af4:	d308      	bcc.n	8003b08 <UART_SetConfig+0x410>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afc:	d204      	bcs.n	8003b08 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e0ff      	b.n	8003d08 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e0fc      	b.n	8003d08 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	f040 8083 	bne.w	8003c20 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8003b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d85e      	bhi.n	8003be0 <UART_SetConfig+0x4e8>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0x430>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b8d 	.word	0x08003b8d
 8003b34:	08003be1 	.word	0x08003be1
 8003b38:	08003ba9 	.word	0x08003ba9
 8003b3c:	08003be1 	.word	0x08003be1
 8003b40:	08003be1 	.word	0x08003be1
 8003b44:	08003be1 	.word	0x08003be1
 8003b48:	08003bc9 	.word	0x08003bc9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe fa44 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 8003b50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b6a:	e03c      	b.n	8003be6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fa4a 	bl	8002004 <HAL_RCC_GetPCLK2Freq>
 8003b70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	005a      	lsls	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003b8a:	e02c      	b.n	8003be6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003b96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6852      	ldr	r2, [r2, #4]
 8003b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ba6:	e01e      	b.n	8003be6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba8:	f7fe f980 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003bac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	005a      	lsls	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bc6:	e00e      	b.n	8003be6 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bde:	e002      	b.n	8003be6 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	76fb      	strb	r3, [r7, #27]
        break;
 8003be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b0f      	cmp	r3, #15
 8003bea:	d916      	bls.n	8003c1a <UART_SetConfig+0x522>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d212      	bcs.n	8003c1a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f023 030f 	bic.w	r3, r3, #15
 8003bfc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	60da      	str	r2, [r3, #12]
 8003c18:	e076      	b.n	8003d08 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	76fb      	strb	r3, [r7, #27]
 8003c1e:	e073      	b.n	8003d08 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8003c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d85c      	bhi.n	8003ce2 <UART_SetConfig+0x5ea>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <UART_SetConfig+0x538>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c73 	.word	0x08003c73
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003ce3 	.word	0x08003ce3
 8003c40:	08003cad 	.word	0x08003cad
 8003c44:	08003ce3 	.word	0x08003ce3
 8003c48:	08003ce3 	.word	0x08003ce3
 8003c4c:	08003ce3 	.word	0x08003ce3
 8003c50:	08003ccb 	.word	0x08003ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c54:	f7fe f9c0 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 8003c58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	085a      	lsrs	r2, r3, #1
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	441a      	add	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c70:	e03a      	b.n	8003ce8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c72:	f7fe f9c7 	bl	8002004 <HAL_RCC_GetPCLK2Freq>
 8003c76:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	085a      	lsrs	r2, r3, #1
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c8e:	e02b      	b.n	8003ce8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003caa:	e01d      	b.n	8003ce8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cac:	f7fe f8fe 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003cb0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	085a      	lsrs	r2, r3, #1
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	441a      	add	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cc8:	e00e      	b.n	8003ce8 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ce0:	e002      	b.n	8003ce8 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	76fb      	strb	r3, [r7, #27]
        break;
 8003ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d90a      	bls.n	8003d04 <UART_SetConfig+0x60c>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d206      	bcs.n	8003d04 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e003      	b.n	8003d08 <UART_SetConfig+0x610>
 8003d00:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d14:	7efb      	ldrb	r3, [r7, #27]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	; 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01a      	beq.n	8003e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d10a      	bne.n	8003e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e72:	f7fc ffdf 	bl	8000e34 <HAL_GetTick>
 8003e76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d10e      	bne.n	8003ea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f82a 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e020      	b.n	8003ee6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d10e      	bne.n	8003ed0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f814 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e00a      	b.n	8003ee6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efe:	e05d      	b.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d059      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f08:	f7fc ff94 	bl	8000e34 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11b      	bne.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e042      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02b      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f72:	d123      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e00f      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d092      	beq.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff6:	2b84      	cmp	r3, #132	; 0x84
 8003ff8:	d005      	beq.n	8004006 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ffa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	3303      	adds	r3, #3
 8004004:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004018:	f000 fada 	bl	80045d0 <vTaskStartScheduler>
  
  return osOK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	bd80      	pop	{r7, pc}

08004022 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004022:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004024:	b089      	sub	sp, #36	; 0x24
 8004026:	af04      	add	r7, sp, #16
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <osThreadCreate+0x54>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01c      	beq.n	8004076 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685c      	ldr	r4, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681d      	ldr	r5, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691e      	ldr	r6, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ffc8 	bl	8003fe4 <makeFreeRtosPriority>
 8004054:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800405e:	9202      	str	r2, [sp, #8]
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	9100      	str	r1, [sp, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4632      	mov	r2, r6
 8004068:	4629      	mov	r1, r5
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f8ed 	bl	800424a <xTaskCreateStatic>
 8004070:	4603      	mov	r3, r0
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e01c      	b.n	80040b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685c      	ldr	r4, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004082:	b29e      	uxth	r6, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ffaa 	bl	8003fe4 <makeFreeRtosPriority>
 8004090:	4602      	mov	r2, r0
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	9200      	str	r2, [sp, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4632      	mov	r2, r6
 800409e:	4629      	mov	r1, r5
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f92c 	bl	80042fe <xTaskCreate>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d001      	beq.n	80040b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <osDelay+0x16>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	e000      	b.n	80040d2 <osDelay+0x18>
 80040d0:	2301      	movs	r3, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fa48 	bl	8004568 <vTaskDelay>
  
  return osOK;
 80040d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f103 0208 	add.w	r2, r3, #8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f04f 32ff 	mov.w	r2, #4294967295
 80040fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f103 0208 	add.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 0208 	add.w	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d103      	bne.n	80041a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e00c      	b.n	80041be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3308      	adds	r3, #8
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e002      	b.n	80041b2 <vListInsert+0x2e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d2f6      	bcs.n	80041ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6852      	ldr	r2, [r2, #4]
 8004216:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d103      	bne.n	800422a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	1e5a      	subs	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08e      	sub	sp, #56	; 0x38
 800424e:	af04      	add	r7, sp, #16
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	e7fe      	b.n	8004270 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <xTaskCreateStatic+0x42>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e7fe      	b.n	800428a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800428c:	2354      	movs	r3, #84	; 0x54
 800428e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b54      	cmp	r3, #84	; 0x54
 8004294:	d009      	beq.n	80042aa <xTaskCreateStatic+0x60>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01e      	beq.n	80042f0 <xTaskCreateStatic+0xa6>
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042ca:	2300      	movs	r3, #0
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f850 	bl	8004388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ea:	f000 f8d3 	bl	8004494 <prvAddNewTaskToReadyList>
 80042ee:	e001      	b.n	80042f4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f4:	697b      	ldr	r3, [r7, #20]
	}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b08c      	sub	sp, #48	; 0x30
 8004302:	af04      	add	r7, sp, #16
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f000 feae 	bl	8005074 <pvPortMalloc>
 8004318:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004320:	2054      	movs	r0, #84	; 0x54
 8004322:	f000 fea7 	bl	8005074 <pvPortMalloc>
 8004326:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
 8004334:	e005      	b.n	8004342 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f000 ff5e 	bl	80051f8 <vPortFree>
 800433c:	e001      	b.n	8004342 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d017      	beq.n	8004378 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	2300      	movs	r3, #0
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f80e 	bl	8004388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436c:	69f8      	ldr	r0, [r7, #28]
 800436e:	f000 f891 	bl	8004494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004372:	2301      	movs	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e002      	b.n	800437e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800437e:	69bb      	ldr	r3, [r7, #24]
	}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043a0:	3b01      	subs	r3, #1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <prvInitialiseNewTask+0x46>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e7fe      	b.n	80043cc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01f      	beq.n	8004414 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e012      	b.n	8004400 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	7819      	ldrb	r1, [r3, #0]
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	3334      	adds	r3, #52	; 0x34
 80043ea:	460a      	mov	r2, r1
 80043ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d9e9      	bls.n	80043da <prvInitialiseNewTask+0x52>
 8004406:	e000      	b.n	800440a <prvInitialiseNewTask+0x82>
			{
				break;
 8004408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004412:	e003      	b.n	800441c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2b06      	cmp	r3, #6
 8004420:	d901      	bls.n	8004426 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004422:	2306      	movs	r3, #6
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2200      	movs	r2, #0
 8004436:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fe70 	bl	8004122 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	3318      	adds	r3, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fe6b 	bl	8004122 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f1c3 0207 	rsb	r2, r3, #7
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	69b8      	ldr	r0, [r7, #24]
 8004476:	f000 fbfd 	bl	8004c74 <pxPortInitialiseStack>
 800447a:	4602      	mov	r2, r0
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800449c:	f000 fd0e 	bl	8004ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a29      	ldr	r2, [pc, #164]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044aa:	4b29      	ldr	r3, [pc, #164]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d110      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c0:	f000 fab8 	bl	8004a34 <prvInitialiseTaskLists>
 80044c4:	e00d      	b.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <prvAddNewTaskToReadyList+0xc0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d802      	bhi.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <prvAddNewTaskToReadyList+0xcc>)
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fe11 	bl	800413c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800451a:	f000 fcfd 	bl	8004f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <prvAddNewTaskToReadyList+0xc0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <prvAddNewTaskToReadyList+0xbc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvAddNewTaskToReadyList+0xd0>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200003a0 	.word	0x200003a0
 8004550:	200002a0 	.word	0x200002a0
 8004554:	200003ac 	.word	0x200003ac
 8004558:	200003bc 	.word	0x200003bc
 800455c:	200003a8 	.word	0x200003a8
 8004560:	200002a4 	.word	0x200002a4
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <vTaskDelay+0x60>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <vTaskDelay+0x2e>
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	e7fe      	b.n	8004594 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004596:	f000 f879 	bl	800468c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800459a:	2100      	movs	r1, #0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fb03 	bl	8004ba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045a2:	f000 f881 	bl	80046a8 <xTaskResumeAll>
 80045a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <vTaskDelay+0x64>)
 80045b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200003c8 	.word	0x200003c8
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045de:	463a      	mov	r2, r7
 80045e0:	1d39      	adds	r1, r7, #4
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fb ff72 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	9202      	str	r2, [sp, #8]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	460a      	mov	r2, r1
 80045fe:	491d      	ldr	r1, [pc, #116]	; (8004674 <vTaskStartScheduler+0xa4>)
 8004600:	481d      	ldr	r0, [pc, #116]	; (8004678 <vTaskStartScheduler+0xa8>)
 8004602:	f7ff fe22 	bl	800424a <xTaskCreateStatic>
 8004606:	4602      	mov	r2, r0
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <vTaskStartScheduler+0xac>)
 800460a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <vTaskStartScheduler+0xac>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004614:	2301      	movs	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e001      	b.n	800461e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d115      	bne.n	8004650 <vTaskStartScheduler+0x80>
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <vTaskStartScheduler+0xb0>)
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <vTaskStartScheduler+0xb4>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <vTaskStartScheduler+0xb8>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800464a:	f000 fb99 	bl	8004d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800464e:	e00d      	b.n	800466c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d109      	bne.n	800466c <vTaskStartScheduler+0x9c>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e7fe      	b.n	800466a <vTaskStartScheduler+0x9a>
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	08006084 	.word	0x08006084
 8004678:	08004a05 	.word	0x08004a05
 800467c:	200003c4 	.word	0x200003c4
 8004680:	200003c0 	.word	0x200003c0
 8004684:	200003ac 	.word	0x200003ac
 8004688:	200003a4 	.word	0x200003a4

0800468c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <vTaskSuspendAll+0x18>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <vTaskSuspendAll+0x18>)
 8004698:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	200003c8 	.word	0x200003c8

080046a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046b6:	4b41      	ldr	r3, [pc, #260]	; (80047bc <xTaskResumeAll+0x114>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <xTaskResumeAll+0x2a>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	e7fe      	b.n	80046d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046d2:	f000 fbf3 	bl	8004ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <xTaskResumeAll+0x114>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a37      	ldr	r2, [pc, #220]	; (80047bc <xTaskResumeAll+0x114>)
 80046de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <xTaskResumeAll+0x114>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d161      	bne.n	80047ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <xTaskResumeAll+0x118>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05d      	beq.n	80047ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046f0:	e02e      	b.n	8004750 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f2:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <xTaskResumeAll+0x11c>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3318      	adds	r3, #24
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fd79 	bl	80041f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fd74 	bl	80041f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	2201      	movs	r2, #1
 8004714:	409a      	lsls	r2, r3
 8004716:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <xTaskResumeAll+0x120>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4313      	orrs	r3, r2
 800471c:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <xTaskResumeAll+0x120>)
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <xTaskResumeAll+0x124>)
 800472e:	441a      	add	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3304      	adds	r3, #4
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f7ff fd00 	bl	800413c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <xTaskResumeAll+0x128>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800474a:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <xTaskResumeAll+0x12c>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004750:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <xTaskResumeAll+0x11c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1cc      	bne.n	80046f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800475e:	f000 fa03 	bl	8004b68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <xTaskResumeAll+0x130>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d010      	beq.n	8004790 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800476e:	f000 f837 	bl	80047e0 <xTaskIncrementTick>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <xTaskResumeAll+0x12c>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3b01      	subs	r3, #1
 8004782:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f1      	bne.n	800476e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <xTaskResumeAll+0x130>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004790:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <xTaskResumeAll+0x12c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <xTaskResumeAll+0x134>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047ac:	f000 fbb4 	bl	8004f18 <vPortExitCritical>

	return xAlreadyYielded;
 80047b0:	68bb      	ldr	r3, [r7, #8]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	200003c8 	.word	0x200003c8
 80047c0:	200003a0 	.word	0x200003a0
 80047c4:	20000360 	.word	0x20000360
 80047c8:	200003a8 	.word	0x200003a8
 80047cc:	200002a4 	.word	0x200002a4
 80047d0:	200002a0 	.word	0x200002a0
 80047d4:	200003b4 	.word	0x200003b4
 80047d8:	200003b0 	.word	0x200003b0
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ea:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <xTaskIncrementTick+0x144>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 8087 	bne.w	8004902 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047f4:	4b4c      	ldr	r3, [pc, #304]	; (8004928 <xTaskIncrementTick+0x148>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047fc:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <xTaskIncrementTick+0x148>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11f      	bne.n	8004848 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004808:	4b48      	ldr	r3, [pc, #288]	; (800492c <xTaskIncrementTick+0x14c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <xTaskIncrementTick+0x46>
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	e7fe      	b.n	8004824 <xTaskIncrementTick+0x44>
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <xTaskIncrementTick+0x14c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	4b40      	ldr	r3, [pc, #256]	; (8004930 <xTaskIncrementTick+0x150>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3e      	ldr	r2, [pc, #248]	; (800492c <xTaskIncrementTick+0x14c>)
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4a3e      	ldr	r2, [pc, #248]	; (8004930 <xTaskIncrementTick+0x150>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <xTaskIncrementTick+0x154>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <xTaskIncrementTick+0x154>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	f000 f990 	bl	8004b68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004848:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <xTaskIncrementTick+0x158>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d348      	bcc.n	80048e4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <xTaskIncrementTick+0x14c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <xTaskIncrementTick+0x158>)
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	601a      	str	r2, [r3, #0]
					break;
 8004864:	e03e      	b.n	80048e4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004866:	4b31      	ldr	r3, [pc, #196]	; (800492c <xTaskIncrementTick+0x14c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d203      	bcs.n	8004886 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800487e:	4a2e      	ldr	r2, [pc, #184]	; (8004938 <xTaskIncrementTick+0x158>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004884:	e02e      	b.n	80048e4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fcb3 	bl	80041f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3318      	adds	r3, #24
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fcaa 	bl	80041f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	2201      	movs	r2, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <xTaskIncrementTick+0x15c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <xTaskIncrementTick+0x15c>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <xTaskIncrementTick+0x160>)
 80048c2:	441a      	add	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7ff fc36 	bl	800413c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <xTaskIncrementTick+0x164>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3b9      	bcc.n	8004852 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048de:	2301      	movs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e2:	e7b6      	b.n	8004852 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048e4:	4b17      	ldr	r3, [pc, #92]	; (8004944 <xTaskIncrementTick+0x164>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	4915      	ldr	r1, [pc, #84]	; (8004940 <xTaskIncrementTick+0x160>)
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d907      	bls.n	800490c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e004      	b.n	800490c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <xTaskIncrementTick+0x168>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <xTaskIncrementTick+0x168>)
 800490a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <xTaskIncrementTick+0x16c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004918:	697b      	ldr	r3, [r7, #20]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200003c8 	.word	0x200003c8
 8004928:	200003a4 	.word	0x200003a4
 800492c:	20000358 	.word	0x20000358
 8004930:	2000035c 	.word	0x2000035c
 8004934:	200003b8 	.word	0x200003b8
 8004938:	200003c0 	.word	0x200003c0
 800493c:	200003a8 	.word	0x200003a8
 8004940:	200002a4 	.word	0x200002a4
 8004944:	200002a0 	.word	0x200002a0
 8004948:	200003b0 	.word	0x200003b0
 800494c:	200003b4 	.word	0x200003b4

08004950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004956:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <vTaskSwitchContext+0xa0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800495e:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <vTaskSwitchContext+0xa4>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004964:	e03e      	b.n	80049e4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004966:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <vTaskSwitchContext+0xa4>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800496c:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <vTaskSwitchContext+0xa8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	f1c3 031f 	rsb	r3, r3, #31
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	491e      	ldr	r1, [pc, #120]	; (80049fc <vTaskSwitchContext+0xac>)
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <vTaskSwitchContext+0x5a>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	e7fe      	b.n	80049a8 <vTaskSwitchContext+0x58>
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4a11      	ldr	r2, [pc, #68]	; (80049fc <vTaskSwitchContext+0xac>)
 80049b6:	4413      	add	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3308      	adds	r3, #8
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d104      	bne.n	80049da <vTaskSwitchContext+0x8a>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a07      	ldr	r2, [pc, #28]	; (8004a00 <vTaskSwitchContext+0xb0>)
 80049e2:	6013      	str	r3, [r2, #0]
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	200003c8 	.word	0x200003c8
 80049f4:	200003b4 	.word	0x200003b4
 80049f8:	200003a8 	.word	0x200003a8
 80049fc:	200002a4 	.word	0x200002a4
 8004a00:	200002a0 	.word	0x200002a0

08004a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a0c:	f000 f852 	bl	8004ab4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <prvIdleTask+0x28>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d9f9      	bls.n	8004a0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <prvIdleTask+0x2c>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a28:	e7f0      	b.n	8004a0c <prvIdleTask+0x8>
 8004a2a:	bf00      	nop
 8004a2c:	200002a4 	.word	0x200002a4
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e00c      	b.n	8004a5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <prvInitialiseTaskLists+0x60>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fb47 	bl	80040e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d9ef      	bls.n	8004a40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a60:	480d      	ldr	r0, [pc, #52]	; (8004a98 <prvInitialiseTaskLists+0x64>)
 8004a62:	f7ff fb3e 	bl	80040e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a66:	480d      	ldr	r0, [pc, #52]	; (8004a9c <prvInitialiseTaskLists+0x68>)
 8004a68:	f7ff fb3b 	bl	80040e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a6c:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <prvInitialiseTaskLists+0x6c>)
 8004a6e:	f7ff fb38 	bl	80040e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a72:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <prvInitialiseTaskLists+0x70>)
 8004a74:	f7ff fb35 	bl	80040e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a78:	480b      	ldr	r0, [pc, #44]	; (8004aa8 <prvInitialiseTaskLists+0x74>)
 8004a7a:	f7ff fb32 	bl	80040e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <prvInitialiseTaskLists+0x78>)
 8004a80:	4a05      	ldr	r2, [pc, #20]	; (8004a98 <prvInitialiseTaskLists+0x64>)
 8004a82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <prvInitialiseTaskLists+0x7c>)
 8004a86:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <prvInitialiseTaskLists+0x68>)
 8004a88:	601a      	str	r2, [r3, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200002a4 	.word	0x200002a4
 8004a98:	20000330 	.word	0x20000330
 8004a9c:	20000344 	.word	0x20000344
 8004aa0:	20000360 	.word	0x20000360
 8004aa4:	20000374 	.word	0x20000374
 8004aa8:	2000038c 	.word	0x2000038c
 8004aac:	20000358 	.word	0x20000358
 8004ab0:	2000035c 	.word	0x2000035c

08004ab4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aba:	e019      	b.n	8004af0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004abc:	f000 f9fe 	bl	8004ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <prvCheckTasksWaitingTermination+0x4c>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fb92 	bl	80041f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <prvCheckTasksWaitingTermination+0x50>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <prvCheckTasksWaitingTermination+0x50>)
 8004ada:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <prvCheckTasksWaitingTermination+0x54>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <prvCheckTasksWaitingTermination+0x54>)
 8004ae4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ae6:	f000 fa17 	bl	8004f18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f80e 	bl	8004b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <prvCheckTasksWaitingTermination+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e1      	bne.n	8004abc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000374 	.word	0x20000374
 8004b04:	200003a0 	.word	0x200003a0
 8004b08:	20000388 	.word	0x20000388

08004b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fb68 	bl	80051f8 <vPortFree>
				vPortFree( pxTCB );
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fb65 	bl	80051f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b2e:	e017      	b.n	8004b60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d103      	bne.n	8004b42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fb5c 	bl	80051f8 <vPortFree>
	}
 8004b40:	e00e      	b.n	8004b60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d009      	beq.n	8004b60 <prvDeleteTCB+0x54>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e7fe      	b.n	8004b5e <prvDeleteTCB+0x52>
	}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <prvResetNextTaskUnblockTime+0x38>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8004b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b80:	e008      	b.n	8004b94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <prvResetNextTaskUnblockTime+0x38>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8004b92:	6013      	str	r3, [r2, #0]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000358 	.word	0x20000358
 8004ba4:	200003c0 	.word	0x200003c0

08004ba8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bb2:	4b29      	ldr	r3, [pc, #164]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb8:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fb19 	bl	80041f6 <uxListRemove>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004be0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d10a      	bne.n	8004c00 <prvAddCurrentTaskToDelayedList+0x58>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	481a      	ldr	r0, [pc, #104]	; (8004c64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004bfa:	f7ff fa9f 	bl	800413c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bfe:	e026      	b.n	8004c4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c08:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d209      	bcs.n	8004c2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7ff faad 	bl	8004184 <vListInsert>
}
 8004c2a:	e010      	b.n	8004c4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7ff faa3 	bl	8004184 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d202      	bcs.n	8004c4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6013      	str	r3, [r2, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200003a4 	.word	0x200003a4
 8004c5c:	200002a0 	.word	0x200002a0
 8004c60:	200003a8 	.word	0x200003a8
 8004c64:	2000038c 	.word	0x2000038c
 8004c68:	2000035c 	.word	0x2000035c
 8004c6c:	20000358 	.word	0x20000358
 8004c70:	200003c0 	.word	0x200003c0

08004c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b04      	subs	r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b04      	subs	r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca4:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <pxPortInitialiseStack+0x64>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b14      	subs	r3, #20
 8004cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b04      	subs	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f06f 0202 	mvn.w	r2, #2
 8004cc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b20      	subs	r3, #32
 8004cc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cca:	68fb      	ldr	r3, [r7, #12]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	08004cdd 	.word	0x08004cdd

08004cdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <prvTaskExitError+0x50>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d009      	beq.n	8004d04 <prvTaskExitError+0x28>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	e7fe      	b.n	8004d02 <prvTaskExitError+0x26>
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d16:	bf00      	nop
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0fc      	beq.n	8004d18 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	4770      	bx	lr
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d58:	4808      	ldr	r0, [pc, #32]	; (8004d7c <prvPortStartFirstTask+0x24>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8814 	msr	CONTROL, r0
 8004d6a:	b662      	cpsie	i
 8004d6c:	b661      	cpsie	f
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	df00      	svc	0
 8004d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed08 	.word	0xe000ed08

08004d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d86:	4b44      	ldr	r3, [pc, #272]	; (8004e98 <xPortStartScheduler+0x118>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a44      	ldr	r2, [pc, #272]	; (8004e9c <xPortStartScheduler+0x11c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <xPortStartScheduler+0x24>
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e7fe      	b.n	8004da2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004da4:	4b3c      	ldr	r3, [pc, #240]	; (8004e98 <xPortStartScheduler+0x118>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a3d      	ldr	r2, [pc, #244]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d109      	bne.n	8004dc2 <xPortStartScheduler+0x42>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e7fe      	b.n	8004dc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dc2:	4b38      	ldr	r3, [pc, #224]	; (8004ea4 <xPortStartScheduler+0x124>)
 8004dc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4b30      	ldr	r3, [pc, #192]	; (8004ea8 <xPortStartScheduler+0x128>)
 8004de8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dea:	4b30      	ldr	r3, [pc, #192]	; (8004eac <xPortStartScheduler+0x12c>)
 8004dec:	2207      	movs	r2, #7
 8004dee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df0:	e009      	b.n	8004e06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004df2:	4b2e      	ldr	r3, [pc, #184]	; (8004eac <xPortStartScheduler+0x12c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <xPortStartScheduler+0x12c>)
 8004dfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d0ef      	beq.n	8004df2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <xPortStartScheduler+0x12c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1c3 0307 	rsb	r3, r3, #7
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d009      	beq.n	8004e32 <xPortStartScheduler+0xb2>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	e7fe      	b.n	8004e30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <xPortStartScheduler+0x12c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <xPortStartScheduler+0x12c>)
 8004e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <xPortStartScheduler+0x12c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <xPortStartScheduler+0x12c>)
 8004e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004e62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e68:	f000 f8d6 	bl	8005018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e72:	f000 f8f5 	bl	8005060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0f      	ldr	r2, [pc, #60]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e82:	f7ff ff69 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e86:	f7ff fd63 	bl	8004950 <vTaskSwitchContext>
	prvTaskExitError();
 8004e8a:	f7ff ff27 	bl	8004cdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed00 	.word	0xe000ed00
 8004e9c:	410fc271 	.word	0x410fc271
 8004ea0:	410fc270 	.word	0x410fc270
 8004ea4:	e000e400 	.word	0xe000e400
 8004ea8:	200003cc 	.word	0x200003cc
 8004eac:	200003d0 	.word	0x200003d0
 8004eb0:	e000ed20 	.word	0xe000ed20
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	e000ef34 	.word	0xe000ef34

08004ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <vPortEnterCritical+0x54>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	4a0d      	ldr	r2, [pc, #52]	; (8004f10 <vPortEnterCritical+0x54>)
 8004edc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <vPortEnterCritical+0x54>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10e      	bne.n	8004f04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <vPortEnterCritical+0x58>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <vPortEnterCritical+0x48>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	e7fe      	b.n	8004f02 <vPortEnterCritical+0x46>
	}
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <vPortExitCritical+0x22>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	e7fe      	b.n	8004f38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <vPortExitCritical+0x3e>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	2000000c 	.word	0x2000000c
	...

08004f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f70:	f3ef 8009 	mrs	r0, PSP
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <pxCurrentTCBConst>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f01e 0f10 	tst.w	lr, #16
 8004f80:	bf08      	it	eq
 8004f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	6010      	str	r0, [r2, #0]
 8004f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f94:	f380 8811 	msr	BASEPRI, r0
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f7ff fcd6 	bl	8004950 <vTaskSwitchContext>
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f380 8811 	msr	BASEPRI, r0
 8004fac:	bc09      	pop	{r0, r3}
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb6:	f01e 0f10 	tst.w	lr, #16
 8004fba:	bf08      	it	eq
 8004fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fc0:	f380 8809 	msr	PSP, r0
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff0:	f7ff fbf6 	bl	80047e0 <xTaskIncrementTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <SysTick_Handler+0x3c>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <vPortSetupTimerInterrupt+0x34>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <vPortSetupTimerInterrupt+0x38>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <vPortSetupTimerInterrupt+0x3c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <vPortSetupTimerInterrupt+0x40>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	099b      	lsrs	r3, r3, #6
 8005034:	4a09      	ldr	r2, [pc, #36]	; (800505c <vPortSetupTimerInterrupt+0x44>)
 8005036:	3b01      	subs	r3, #1
 8005038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <vPortSetupTimerInterrupt+0x34>)
 800503c:	2207      	movs	r2, #7
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000e010 	.word	0xe000e010
 8005050:	e000e018 	.word	0xe000e018
 8005054:	20000000 	.word	0x20000000
 8005058:	10624dd3 	.word	0x10624dd3
 800505c:	e000e014 	.word	0xe000e014

08005060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005070 <vPortEnableVFP+0x10>
 8005064:	6801      	ldr	r1, [r0, #0]
 8005066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800506a:	6001      	str	r1, [r0, #0]
 800506c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800506e:	bf00      	nop
 8005070:	e000ed88 	.word	0xe000ed88

08005074 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005080:	f7ff fb04 	bl	800468c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005084:	4b57      	ldr	r3, [pc, #348]	; (80051e4 <pvPortMalloc+0x170>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800508c:	f000 f90c 	bl	80052a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005090:	4b55      	ldr	r3, [pc, #340]	; (80051e8 <pvPortMalloc+0x174>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 808c 	bne.w	80051b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01c      	beq.n	80050de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050a4:	2208      	movs	r2, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	3308      	adds	r3, #8
 80050be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <pvPortMalloc+0x6a>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e7fe      	b.n	80050dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d068      	beq.n	80051b6 <pvPortMalloc+0x142>
 80050e4:	4b41      	ldr	r3, [pc, #260]	; (80051ec <pvPortMalloc+0x178>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d863      	bhi.n	80051b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050ee:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <pvPortMalloc+0x17c>)
 80050f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050f2:	4b3f      	ldr	r3, [pc, #252]	; (80051f0 <pvPortMalloc+0x17c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050f8:	e004      	b.n	8005104 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d903      	bls.n	8005116 <pvPortMalloc+0xa2>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f1      	bne.n	80050fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005116:	4b33      	ldr	r3, [pc, #204]	; (80051e4 <pvPortMalloc+0x170>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	429a      	cmp	r2, r3
 800511e:	d04a      	beq.n	80051b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2208      	movs	r2, #8
 8005126:	4413      	add	r3, r2
 8005128:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	2308      	movs	r3, #8
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	429a      	cmp	r2, r3
 8005140:	d91e      	bls.n	8005180 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <pvPortMalloc+0xf4>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e7fe      	b.n	8005166 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800517a:	69b8      	ldr	r0, [r7, #24]
 800517c:	f000 f8f6 	bl	800536c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <pvPortMalloc+0x178>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	4a18      	ldr	r2, [pc, #96]	; (80051ec <pvPortMalloc+0x178>)
 800518c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <pvPortMalloc+0x178>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <pvPortMalloc+0x180>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d203      	bcs.n	80051a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <pvPortMalloc+0x178>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <pvPortMalloc+0x180>)
 80051a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <pvPortMalloc+0x174>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051b6:	f7ff fa77 	bl	80046a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <pvPortMalloc+0x164>
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e7fe      	b.n	80051d6 <pvPortMalloc+0x162>
	return pvReturn;
 80051d8:	69fb      	ldr	r3, [r7, #28]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3728      	adds	r7, #40	; 0x28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000f94 	.word	0x20000f94
 80051e8:	20000fa0 	.word	0x20000fa0
 80051ec:	20000f98 	.word	0x20000f98
 80051f0:	20000f8c 	.word	0x20000f8c
 80051f4:	20000f9c 	.word	0x20000f9c

080051f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d046      	beq.n	8005298 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800520a:	2308      	movs	r3, #8
 800520c:	425b      	negs	r3, r3
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <vPortFree+0xa8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4013      	ands	r3, r2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <vPortFree+0x42>
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e7fe      	b.n	8005238 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <vPortFree+0x5e>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	e7fe      	b.n	8005254 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <vPortFree+0xa8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d115      	bne.n	8005298 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortFree+0xa8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	43db      	mvns	r3, r3
 8005276:	401a      	ands	r2, r3
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800527c:	f7ff fa06 	bl	800468c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <vPortFree+0xac>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4413      	add	r3, r2
 800528a:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <vPortFree+0xac>)
 800528c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f000 f86c 	bl	800536c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005294:	f7ff fa08 	bl	80046a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000fa0 	.word	0x20000fa0
 80052a4:	20000f98 	.word	0x20000f98

080052a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80052b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <prvHeapInit+0xac>)
 80052b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3307      	adds	r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0307 	bic.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <prvHeapInit+0xac>)
 80052d8:	4413      	add	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <prvHeapInit+0xb0>)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052e6:	4b1c      	ldr	r3, [pc, #112]	; (8005358 <prvHeapInit+0xb0>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4413      	add	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052f4:	2208      	movs	r2, #8
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0307 	bic.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <prvHeapInit+0xb4>)
 8005308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <prvHeapInit+0xb4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <prvHeapInit+0xb4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	1ad2      	subs	r2, r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <prvHeapInit+0xb4>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <prvHeapInit+0xb8>)
 8005336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <prvHeapInit+0xbc>)
 800533e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <prvHeapInit+0xc0>)
 8005342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005346:	601a      	str	r2, [r3, #0]
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	200003d4 	.word	0x200003d4
 8005358:	20000f8c 	.word	0x20000f8c
 800535c:	20000f94 	.word	0x20000f94
 8005360:	20000f9c 	.word	0x20000f9c
 8005364:	20000f98 	.word	0x20000f98
 8005368:	20000fa0 	.word	0x20000fa0

0800536c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005374:	4b28      	ldr	r3, [pc, #160]	; (8005418 <prvInsertBlockIntoFreeList+0xac>)
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e002      	b.n	8005380 <prvInsertBlockIntoFreeList+0x14>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d8f7      	bhi.n	800537a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4413      	add	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d108      	bne.n	80053ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	441a      	add	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	441a      	add	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d118      	bne.n	80053f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <prvInsertBlockIntoFreeList+0xb0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d00d      	beq.n	80053ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	441a      	add	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e008      	b.n	80053fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <prvInsertBlockIntoFreeList+0xb0>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e003      	b.n	80053fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d002      	beq.n	800540a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000f8c 	.word	0x20000f8c
 800541c:	20000f94 	.word	0x20000f94

08005420 <api>:
#include "cmsis_os.h"
#include "leds.h"

/* USER CODE END Header_api */
void api(void const * argument)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN api */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005428:	2001      	movs	r0, #1
 800542a:	f7fe fe46 	bl	80040ba <osDelay>
 800542e:	e7fb      	b.n	8005428 <api+0x8>

08005430 <control>:
//ESTRUCTURA GLOBAL DEL PROYECTO
velocista_st vel;
velocista_setup_st vel_setup;

void control(void const * argument)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	Default_Setup ();// cargar valores iniciales
 8005438:	f000 f9e2 	bl	8005800 <Default_Setup>

	motores_Init();
 800543c:	f000 fa68 	bl	8005910 <motores_Init>
	motores(0,0);
 8005440:	2100      	movs	r1, #0
 8005442:	2000      	movs	r0, #0
 8005444:	f000 fa3c 	bl	80058c0 <motores>
	Sensores_Calibracion_Backgound();
 8005448:	f000 fccc 	bl	8005de4 <Sensores_Calibracion_Backgound>
	leds(1,1);//motores ok, calibracion fondo ok
 800544c:	2101      	movs	r1, #1
 800544e:	2001      	movs	r0, #1
 8005450:	f000 fa0c 	bl	800586c <leds>

	osDelay(2000);// inicio calibracion de linea
 8005454:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005458:	f7fe fe2f 	bl	80040ba <osDelay>
	motores(30,-30);
 800545c:	f06f 011d 	mvn.w	r1, #29
 8005460:	201e      	movs	r0, #30
 8005462:	f000 fa2d 	bl	80058c0 <motores>
	leds(1,1);
 8005466:	2101      	movs	r1, #1
 8005468:	2001      	movs	r0, #1
 800546a:	f000 f9ff 	bl	800586c <leds>
	osDelay(200);
 800546e:	20c8      	movs	r0, #200	; 0xc8
 8005470:	f7fe fe23 	bl	80040ba <osDelay>
	Sensores_Calibracion_Line();
 8005474:	f000 fcfe 	bl	8005e74 <Sensores_Calibracion_Line>
	leds(0,0);//calibracion de linea finalizada
 8005478:	2100      	movs	r1, #0
 800547a:	2000      	movs	r0, #0
 800547c:	f000 f9f6 	bl	800586c <leds>
	motores(0,0);
 8005480:	2100      	movs	r1, #0
 8005482:	2000      	movs	r0, #0
 8005484:	f000 fa1c 	bl	80058c0 <motores>
	/************************************************************
	// FIN CALIBRACION LISTA - TEST DE LINEA
	*****************************************************************/
	osDelay(2);
 8005488:	2002      	movs	r0, #2
 800548a:	f7fe fe16 	bl	80040ba <osDelay>

	 motores(0,0);
 800548e:	2100      	movs	r1, #0
 8005490:	2000      	movs	r0, #0
 8005492:	f000 fa15 	bl	80058c0 <motores>

	 vel.suma_i  = 0;
 8005496:	4bbb      	ldr	r3, [pc, #748]	; (8005784 <control+0x354>)
 8005498:	2200      	movs	r2, #0
 800549a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	 for (int i=1;i>=9;i++)		//valores de sensores en cero
 800549e:	2301      	movs	r3, #1
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
 80054a2:	e00a      	b.n	80054ba <control+0x8a>
	 {
		 vel.teta_b[i] = 0;
 80054a4:	4ab7      	ldr	r2, [pc, #732]	; (8005784 <control+0x354>)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	3322      	adds	r3, #34	; 0x22
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
	 for (int i=1;i>=9;i++)		//valores de sensores en cero
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	3301      	adds	r3, #1
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b08      	cmp	r3, #8
 80054be:	dcf1      	bgt.n	80054a4 <control+0x74>
	  }

	 for (int i=9;i>0;i--)		// Carga de valores de los sensores
 80054c0:	2309      	movs	r3, #9
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	e00f      	b.n	80054e6 <control+0xb6>
	 {
		 vel.teta_b[i] =vel.teta_b[i-1];
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	4aae      	ldr	r2, [pc, #696]	; (8005784 <control+0x354>)
 80054cc:	3322      	adds	r3, #34	; 0x22
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	49ab      	ldr	r1, [pc, #684]	; (8005784 <control+0x354>)
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	3322      	adds	r3, #34	; 0x22
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	601a      	str	r2, [r3, #0]
	 for (int i=9;i>0;i--)		// Carga de valores de los sensores
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dcec      	bgt.n	80054c6 <control+0x96>
	  }
	 vel.teta_b[0] = vel.sensores;
 80054ec:	4ba5      	ldr	r3, [pc, #660]	; (8005784 <control+0x354>)
 80054ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f8:	4ba2      	ldr	r3, [pc, #648]	; (8005784 <control+0x354>)
 80054fa:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

     if(vel.teta_b[0] == 0 )
 80054fe:	4ba1      	ldr	r3, [pc, #644]	; (8005784 <control+0x354>)
 8005500:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005504:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550c:	d103      	bne.n	8005516 <control+0xe6>
     {
    	 vel.suma_i  = 0;
 800550e:	4b9d      	ldr	r3, [pc, #628]	; (8005784 <control+0x354>)
 8005510:	2200      	movs	r2, #0
 8005512:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
     }
     	 if(vel.suma_i >= CONTROL_INT_MAX)
 8005516:	4b9b      	ldr	r3, [pc, #620]	; (8005784 <control+0x354>)
 8005518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800551c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005520:	4293      	cmp	r3, r2
 8005522:	dd05      	ble.n	8005530 <control+0x100>
     		{
     		 vel.suma_i = CONTROL_INT_MAX;
 8005524:	4b97      	ldr	r3, [pc, #604]	; (8005784 <control+0x354>)
 8005526:	f643 2298 	movw	r2, #15000	; 0x3a98
 800552a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800552e:	e01d      	b.n	800556c <control+0x13c>
     		}
     	else if(vel.suma_i <= -CONTROL_INT_MAX)
 8005530:	4b94      	ldr	r3, [pc, #592]	; (8005784 <control+0x354>)
 8005532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005536:	4a94      	ldr	r2, [pc, #592]	; (8005788 <control+0x358>)
 8005538:	4293      	cmp	r3, r2
 800553a:	da04      	bge.n	8005546 <control+0x116>
     	{
     		vel.suma_i = -CONTROL_INT_MAX;
 800553c:	4b91      	ldr	r3, [pc, #580]	; (8005784 <control+0x354>)
 800553e:	4a93      	ldr	r2, [pc, #588]	; (800578c <control+0x35c>)
 8005540:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005544:	e012      	b.n	800556c <control+0x13c>
     	}
     	else
     	{
     		vel.suma_i += (vel.teta_b[0]);
 8005546:	4b8f      	ldr	r3, [pc, #572]	; (8005784 <control+0x354>)
 8005548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005554:	4b8b      	ldr	r3, [pc, #556]	; (8005784 <control+0x354>)
 8005556:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800555a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005562:	ee17 2a90 	vmov	r2, s15
 8005566:	4b87      	ldr	r3, [pc, #540]	; (8005784 <control+0x354>)
 8005568:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
     	}

     	int integral = (vel_setup.kig * vel.suma_i);
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <control+0x360>)
 800556e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005572:	4b84      	ldr	r3, [pc, #528]	; (8005784 <control+0x354>)
 8005574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005588:	ee17 3a90 	vmov	r3, s15
 800558c:	60fb      	str	r3, [r7, #12]
     					vel.pwmd = (vel.teta_b[0]*vel_setup.kpg) +  (vel_setup.kdg*(vel.teta_b[0] - vel.teta_b[3])) + integral;
 800558e:	4b7d      	ldr	r3, [pc, #500]	; (8005784 <control+0x354>)
 8005590:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8005594:	4b7e      	ldr	r3, [pc, #504]	; (8005790 <control+0x360>)
 8005596:	edd3 7a02 	vldr	s15, [r3, #8]
 800559a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800559e:	4b7c      	ldr	r3, [pc, #496]	; (8005790 <control+0x360>)
 80055a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80055a4:	4b77      	ldr	r3, [pc, #476]	; (8005784 <control+0x354>)
 80055a6:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 80055aa:	4b76      	ldr	r3, [pc, #472]	; (8005784 <control+0x354>)
 80055ac:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80055b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ca:	4b6e      	ldr	r3, [pc, #440]	; (8005784 <control+0x354>)
 80055cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30


     					if(vel.pwmd>20)
 80055d0:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <control+0x354>)
 80055d2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055d6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80055da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	dd02      	ble.n	80055ea <control+0x1ba>
     						{

     							vel.pwmd = 20;
 80055e4:	4b67      	ldr	r3, [pc, #412]	; (8005784 <control+0x354>)
 80055e6:	4a6b      	ldr	r2, [pc, #428]	; (8005794 <control+0x364>)
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
     						}
     					if(vel.pwmd<-20)
 80055ea:	4b66      	ldr	r3, [pc, #408]	; (8005784 <control+0x354>)
 80055ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055f0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80055f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	d502      	bpl.n	8005604 <control+0x1d4>
     						{
     							vel.pwmd = -20;
 80055fe:	4b61      	ldr	r3, [pc, #388]	; (8005784 <control+0x354>)
 8005600:	4a65      	ldr	r2, [pc, #404]	; (8005798 <control+0x368>)
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
     						}

     					vel.pmw_d = (int) - vel.pwmd;
 8005604:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <control+0x354>)
 8005606:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800560a:	eef1 7a67 	vneg.f32	s15, s15
 800560e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005612:	ee17 2a90 	vmov	r2, s15
 8005616:	4b5b      	ldr	r3, [pc, #364]	; (8005784 <control+0x354>)
 8005618:	629a      	str	r2, [r3, #40]	; 0x28
     					vel.pmw_i = (int)  vel.pwmd;
 800561a:	4b5a      	ldr	r3, [pc, #360]	; (8005784 <control+0x354>)
 800561c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005624:	ee17 2a90 	vmov	r2, s15
 8005628:	4b56      	ldr	r3, [pc, #344]	; (8005784 <control+0x354>)
 800562a:	62da      	str	r2, [r3, #44]	; 0x2c

     					motores(vel.pmw_i,vel.pmw_d);
 800562c:	4b55      	ldr	r3, [pc, #340]	; (8005784 <control+0x354>)
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4b54      	ldr	r3, [pc, #336]	; (8005784 <control+0x354>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 f942 	bl	80058c0 <motores>

     					//Direccionales
     					if(vel.pwmd > 0)
 800563c:	4b51      	ldr	r3, [pc, #324]	; (8005784 <control+0x354>)
 800563e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	dd04      	ble.n	8005656 <control+0x226>
     						{
     						    leds(1, 0);
 800564c:	2100      	movs	r1, #0
 800564e:	2001      	movs	r0, #1
 8005650:	f000 f90c 	bl	800586c <leds>
 8005654:	e003      	b.n	800565e <control+0x22e>
     						}
     					else
     						{
     						    leds(0, 1);
 8005656:	2101      	movs	r1, #1
 8005658:	2000      	movs	r0, #0
 800565a:	f000 f907 	bl	800586c <leds>
     						}
     					osDelay(2);
 800565e:	2002      	movs	r0, #2
 8005660:	f7fe fd2b 	bl	80040ba <osDelay>

	while(1)
	{
		float pwml,pwmr;

		 for (int i=19;i>0;i--)		// Carga de valores de los sensores
 8005664:	2313      	movs	r3, #19
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e00f      	b.n	800568a <control+0x25a>
		 {
			 vel.teta_b[i] =vel.teta_b[i-1];
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	3b01      	subs	r3, #1
 800566e:	4a45      	ldr	r2, [pc, #276]	; (8005784 <control+0x354>)
 8005670:	3322      	adds	r3, #34	; 0x22
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4942      	ldr	r1, [pc, #264]	; (8005784 <control+0x354>)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3322      	adds	r3, #34	; 0x22
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	601a      	str	r2, [r3, #0]
		 for (int i=19;i>0;i--)		// Carga de valores de los sensores
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3b01      	subs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dcec      	bgt.n	800566a <control+0x23a>
		  }
		vel.teta_b[0] = vel.sensores;
 8005690:	4b3c      	ldr	r3, [pc, #240]	; (8005784 <control+0x354>)
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569c:	4b39      	ldr	r3, [pc, #228]	; (8005784 <control+0x354>)
 800569e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

		vel.detect_recta_ant = vel.detect_recta;
 80056a2:	4b38      	ldr	r3, [pc, #224]	; (8005784 <control+0x354>)
 80056a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a8:	4a36      	ldr	r2, [pc, #216]	; (8005784 <control+0x354>)
 80056aa:	67d3      	str	r3, [r2, #124]	; 0x7c
		vel.detect_recta = 1;
 80056ac:	4b35      	ldr	r3, [pc, #212]	; (8005784 <control+0x354>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		for(int i=0 ; i<20; i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	e022      	b.n	8005700 <control+0x2d0>
		{
			if( vel.teta_b[i] > 8 || vel.teta_b[i] < -8)
 80056ba:	4a32      	ldr	r2, [pc, #200]	; (8005784 <control+0x354>)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3322      	adds	r3, #34	; 0x22
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	edd3 7a00 	vldr	s15, [r3]
 80056c8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80056cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d4:	dc0d      	bgt.n	80056f2 <control+0x2c2>
 80056d6:	4a2b      	ldr	r2, [pc, #172]	; (8005784 <control+0x354>)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	3322      	adds	r3, #34	; 0x22
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	edd3 7a00 	vldr	s15, [r3]
 80056e4:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80056e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	d503      	bpl.n	80056fa <control+0x2ca>
		  {
			  vel.detect_recta = 0;
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <control+0x354>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		for(int i=0 ; i<20; i++)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3301      	adds	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b13      	cmp	r3, #19
 8005704:	ddd9      	ble.n	80056ba <control+0x28a>
			}

		}


		if(vel.detect_recta)
 8005706:	4b1f      	ldr	r3, [pc, #124]	; (8005784 <control+0x354>)
 8005708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <control+0x2ea>
		{
		   leds(0, 0);
 8005710:	2100      	movs	r1, #0
 8005712:	2000      	movs	r0, #0
 8005714:	f000 f8aa 	bl	800586c <leds>
 8005718:	e003      	b.n	8005722 <control+0x2f2>
			 {
//					 vel.pmw_d = (int) -100;
//				   vel.pmw_i = (int) -100;
//					 osDelay(20);
			 }
		     leds(1,1);
 800571a:	2101      	movs	r1, #1
 800571c:	2001      	movs	r0, #1
 800571e:	f000 f8a5 	bl	800586c <leds>
		}


		vel.pwmd = (vel.teta_b[0]*vel_setup.kpg) +  (vel_setup.kdg*(vel.teta_b[0] - vel.teta_b[8]));
 8005722:	4b18      	ldr	r3, [pc, #96]	; (8005784 <control+0x354>)
 8005724:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8005728:	4b19      	ldr	r3, [pc, #100]	; (8005790 <control+0x360>)
 800572a:	edd3 7a02 	vldr	s15, [r3, #8]
 800572e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005732:	4b17      	ldr	r3, [pc, #92]	; (8005790 <control+0x360>)
 8005734:	edd3 6a03 	vldr	s13, [r3, #12]
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <control+0x354>)
 800573a:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 800573e:	4b11      	ldr	r3, [pc, #68]	; (8005784 <control+0x354>)
 8005740:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8005744:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800574c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <control+0x354>)
 8005752:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

				    if(vel.pwmd >= 0)
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <control+0x354>)
 8005758:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800575c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	db1a      	blt.n	800579c <control+0x36c>
						{//la diferencia es positiva
		          pwml = vel_setup.vavg;//0 + (vel.pwmd*0.2);
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <control+0x360>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61fb      	str	r3, [r7, #28]
					    pwmr = vel_setup.vavg - vel.pwmd;
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <control+0x360>)
 800576e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005772:	4b04      	ldr	r3, [pc, #16]	; (8005784 <control+0x354>)
 8005774:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800577c:	edc7 7a06 	vstr	s15, [r7, #24]
 8005780:	e019      	b.n	80057b6 <control+0x386>
 8005782:	bf00      	nop
 8005784:	200010fc 	.word	0x200010fc
 8005788:	ffffc569 	.word	0xffffc569
 800578c:	ffffc568 	.word	0xffffc568
 8005790:	200011dc 	.word	0x200011dc
 8005794:	41a00000 	.word	0x41a00000
 8005798:	c1a00000 	.word	0xc1a00000
						}
						else
						{//la diferencia es negativa
		           pwml = vel_setup.vavg  + vel.pwmd;
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <control+0x3c8>)
 800579e:	ed93 7a01 	vldr	s14, [r3, #4]
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <control+0x3cc>)
 80057a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80057a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ac:	edc7 7a07 	vstr	s15, [r7, #28]
					     pwmr = vel_setup.vavg;// - (vel.pwmd*0.2);
 80057b0:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <control+0x3c8>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	61bb      	str	r3, [r7, #24]
						}

		//			    pwmr = vel_setup.vavg - vel.pwmd;
		//			    pwml = vel_setup.vavg  + vel.pwmd;

						vel.pmw_d = (int) pwmr;
 80057b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80057ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057be:	ee17 2a90 	vmov	r2, s15
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <control+0x3cc>)
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
						vel.pmw_i = (int) pwml;
 80057c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80057ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ce:	ee17 2a90 	vmov	r2, s15
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <control+0x3cc>)
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c

						motores(vel.pmw_i,vel.pmw_d);
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <control+0x3cc>)
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	4b08      	ldr	r3, [pc, #32]	; (80057fc <control+0x3cc>)
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f000 f86d 	bl	80058c0 <motores>


		leds(1,1);
 80057e6:	2101      	movs	r1, #1
 80057e8:	2001      	movs	r0, #1
 80057ea:	f000 f83f 	bl	800586c <leds>
		osDelay(1);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7fe fc63 	bl	80040ba <osDelay>
	{
 80057f4:	e736      	b.n	8005664 <control+0x234>
 80057f6:	bf00      	nop
 80057f8:	200011dc 	.word	0x200011dc
 80057fc:	200010fc 	.word	0x200010fc

08005800 <Default_Setup>:
}



void Default_Setup (void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0

		vel_setup.tipopista = 2; //SET MANUAL
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <Default_Setup+0x58>)
 8005806:	2202      	movs	r2, #2
 8005808:	619a      	str	r2, [r3, #24]

		vel_setup.kpg     = 2.0;   //2.0  en test noche y vuelta
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <Default_Setup+0x58>)
 800580c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005810:	609a      	str	r2, [r3, #8]
		vel_setup.kdg     = 7.2;   //3.0 EN PRIMERA
 8005812:	4b11      	ldr	r3, [pc, #68]	; (8005858 <Default_Setup+0x58>)
 8005814:	4a11      	ldr	r2, [pc, #68]	; (800585c <Default_Setup+0x5c>)
 8005816:	60da      	str	r2, [r3, #12]
		vel_setup.kig     = 0.0005;
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <Default_Setup+0x58>)
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <Default_Setup+0x60>)
 800581c:	611a      	str	r2, [r3, #16]

		vel_setup.vavg    =  60;     //Control de velocidad - MINIMO 65
 800581e:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <Default_Setup+0x58>)
 8005820:	4a10      	ldr	r2, [pc, #64]	; (8005864 <Default_Setup+0x64>)
 8005822:	605a      	str	r2, [r3, #4]

		vel_setup.pmw_t   =  7;      //0 A 9
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <Default_Setup+0x58>)
 8005826:	2207      	movs	r2, #7
 8005828:	615a      	str	r2, [r3, #20]

		vel.sensores = 0;
 800582a:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <Default_Setup+0x68>)
 800582c:	2200      	movs	r2, #0
 800582e:	635a      	str	r2, [r3, #52]	; 0x34
		vel.pmw_d =  0;
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <Default_Setup+0x68>)
 8005832:	2200      	movs	r2, #0
 8005834:	629a      	str	r2, [r3, #40]	; 0x28
		vel.pmw_i =  0;
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <Default_Setup+0x68>)
 8005838:	2200      	movs	r2, #0
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

		vel_setup.remoto_enable = 1;
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <Default_Setup+0x58>)
 800583e:	2201      	movs	r2, #1
 8005840:	61da      	str	r2, [r3, #28]
		vel_setup.sw_enable = 0;
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <Default_Setup+0x58>)
 8005844:	2200      	movs	r2, #0
 8005846:	621a      	str	r2, [r3, #32]
		vel.start = 0XFF;
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <Default_Setup+0x68>)
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	601a      	str	r2, [r3, #0]
}
 800584e:	bf00      	nop
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	200011dc 	.word	0x200011dc
 800585c:	40e66666 	.word	0x40e66666
 8005860:	3a03126f 	.word	0x3a03126f
 8005864:	42700000 	.word	0x42700000
 8005868:	200010fc 	.word	0x200010fc

0800586c <leds>:
// includes
#include "cmsis_os.h"
#include "leds.h"
#include "main.h"

void leds(int LD1, int LD2){
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]

		if(LD1==1){
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d106      	bne.n	800588a <leds+0x1e>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 800587c:	2201      	movs	r2, #1
 800587e:	2110      	movs	r1, #16
 8005880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005884:	f7fb fd4e 	bl	8001324 <HAL_GPIO_WritePin>
 8005888:	e005      	b.n	8005896 <leds+0x2a>
		}
		else{
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 800588a:	2200      	movs	r2, #0
 800588c:	2110      	movs	r1, #16
 800588e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005892:	f7fb fd47 	bl	8001324 <HAL_GPIO_WritePin>
		}
		if(LD2==1){
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d106      	bne.n	80058aa <leds+0x3e>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 800589c:	2201      	movs	r2, #1
 800589e:	2120      	movs	r1, #32
 80058a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058a4:	f7fb fd3e 	bl	8001324 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
		}

}
 80058a8:	e005      	b.n	80058b6 <leds+0x4a>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 80058aa:	2200      	movs	r2, #0
 80058ac:	2120      	movs	r1, #32
 80058ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058b2:	f7fb fd37 	bl	8001324 <HAL_GPIO_WritePin>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <motores>:
 *---------------------------------------------------------------------------*/

/*Funcion principal*/

void motores (int mi, int md)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
	int duty_md2;
	int duty_mi1;
	int duty_mi2;

	//izquierda
	motor(mi, &duty_mi1, &duty_mi2);
 80058ca:	f107 0208 	add.w	r2, r7, #8
 80058ce:	f107 030c 	add.w	r3, r7, #12
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f843 	bl	8005960 <motor>
	TIM1->CCR1 = duty_mi1;
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <motores+0x4c>)
 80058de:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_mi2;
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4b0a      	ldr	r3, [pc, #40]	; (800590c <motores+0x4c>)
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38

	//derecha
	motor(md, &duty_md1, &duty_md2);
 80058e6:	f107 0210 	add.w	r2, r7, #16
 80058ea:	f107 0314 	add.w	r3, r7, #20
 80058ee:	4619      	mov	r1, r3
 80058f0:	6838      	ldr	r0, [r7, #0]
 80058f2:	f000 f835 	bl	8005960 <motor>
	TIM1->CCR4 = duty_md1;
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <motores+0x4c>)
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR3 = duty_md2;
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4b03      	ldr	r3, [pc, #12]	; (800590c <motores+0x4c>)
 8005900:	63da      	str	r2, [r3, #60]	; 0x3c


}
 8005902:	bf00      	nop
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40012c00 	.word	0x40012c00

08005910 <motores_Init>:

/*Inicicializar motores*/

void motores_Init (void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8005914:	2100      	movs	r1, #0
 8005916:	4810      	ldr	r0, [pc, #64]	; (8005958 <motores_Init+0x48>)
 8005918:	f7fc fe58 	bl	80025cc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 800591c:	2104      	movs	r1, #4
 800591e:	480e      	ldr	r0, [pc, #56]	; (8005958 <motores_Init+0x48>)
 8005920:	f7fc fe54 	bl	80025cc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 8005924:	2108      	movs	r1, #8
 8005926:	480c      	ldr	r0, [pc, #48]	; (8005958 <motores_Init+0x48>)
 8005928:	f7fc fe50 	bl	80025cc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 800592c:	210c      	movs	r1, #12
 800592e:	480a      	ldr	r0, [pc, #40]	; (8005958 <motores_Init+0x48>)
 8005930:	f7fc fe4c 	bl	80025cc <HAL_TIM_PWM_Start_IT>

	TIM1->CCR1 = 0;//duty1 0 motor izquierdo
 8005934:	4b09      	ldr	r3, [pc, #36]	; (800595c <motores_Init+0x4c>)
 8005936:	2200      	movs	r2, #0
 8005938:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;//duty2 0 motor izquierdo
 800593a:	4b08      	ldr	r3, [pc, #32]	; (800595c <motores_Init+0x4c>)
 800593c:	2200      	movs	r2, #0
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <motores_Init+0x4c>)
 8005942:	2200      	movs	r2, #0
 8005944:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <motores_Init+0x4c>)
 8005948:	2200      	movs	r2, #0
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(1);
 800594c:	2001      	movs	r0, #1
 800594e:	f7fe fbb4 	bl	80040ba <osDelay>

}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20001070 	.word	0x20001070
 800595c:	40012c00 	.word	0x40012c00

08005960 <motor>:

/*Funcion por motor*/

void motor(int pwm_motor,int *duty1,int *duty2){
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]

	if( pwm_motor >= 100)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b63      	cmp	r3, #99	; 0x63
 8005970:	dd02      	ble.n	8005978 <motor+0x18>
		{
		pwm_motor = 99;
 8005972:	2363      	movs	r3, #99	; 0x63
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e006      	b.n	8005986 <motor+0x26>
		}
		else if(pwm_motor <= -100)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800597e:	da02      	bge.n	8005986 <motor+0x26>
		{
		   pwm_motor = -99;
 8005980:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8005984:	60fb      	str	r3, [r7, #12]
		}

		if(pwm_motor > 0)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	dd10      	ble.n	80059ae <motor+0x4e>
		{
		  *duty2 = MAXPWM - abs(pwm_motor)*10;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfb8      	it	lt
 8005992:	425b      	neglt	r3, r3
 8005994:	f06f 0209 	mvn.w	r2, #9
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	f203 32e9 	addw	r2, r3, #1001	; 0x3e9
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
		  *duty1 = MAXPWM;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e01b      	b.n	80059e6 <motor+0x86>
		}
		else if ( pwm_motor < 0   )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da10      	bge.n	80059d6 <motor+0x76>
		{
		  *duty2 = MAXPWM;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80059ba:	601a      	str	r2, [r3, #0]
		  *duty1 = MAXPWM - abs(pwm_motor)*10;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	425b      	neglt	r3, r3
 80059c4:	f06f 0209 	mvn.w	r2, #9
 80059c8:	fb02 f303 	mul.w	r3, r2, r3
 80059cc:	f203 32e9 	addw	r2, r3, #1001	; 0x3e9
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e007      	b.n	80059e6 <motor+0x86>

		}
		else
         {
		  *duty2 = MAXPWM;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80059dc:	601a      	str	r2, [r3, #0]
		  *duty1 = MAXPWM;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80059e4:	601a      	str	r2, [r3, #0]
		}
	    osDelay(1);
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7fe fb67 	bl	80040ba <osDelay>
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <sensores>:
//CALIBRACION
uint32_t max_sens[NUM_SENSORES];
uint32_t min_sens[NUM_SENSORES];

void sensores(void const * argument)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	609a      	str	r2, [r3, #8]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start(&htim15);
 8005a0c:	4849      	ldr	r0, [pc, #292]	; (8005b34 <sensores+0x140>)
 8005a0e:	f7fc fd53 	bl	80024b8 <HAL_TIM_Base_Start>
	vel.sensores = 0;
 8005a12:	4b49      	ldr	r3, [pc, #292]	; (8005b38 <sensores+0x144>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	635a      	str	r2, [r3, #52]	; 0x34

		for(int is=0; is < NUM_SENSORES ; is ++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1c:	e009      	b.n	8005a32 <sensores+0x3e>
			{
				vel.tr_sens[is]  = 1000; //Default Value
 8005a1e:	4a46      	ldr	r2, [pc, #280]	; (8005b38 <sensores+0x144>)
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	330e      	adds	r3, #14
 8005a24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int is=0; is < NUM_SENSORES ; is ++)
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	3301      	adds	r3, #1
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2b07      	cmp	r3, #7
 8005a36:	ddf2      	ble.n	8005a1e <sensores+0x2a>

  /* Infinite loop */
  for(;;)
  {
	  /*Configure GPIO OUTPUT pin : S8_Pin */
	    GPIO_InitStruct.Pin = S8_Pin;
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(S8_GPIO_Port, &GPIO_InitStruct);
 8005a44:	f107 030c 	add.w	r3, r7, #12
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a4e:	f7fb fadf 	bl	8001010 <HAL_GPIO_Init>

	    /*Configure GPIO  OUTPUT pins : S7_Pin S6_Pin S5_Pin S4_Pin
	                             S3_Pin S2_Pin S1_Pin */
	    GPIO_InitStruct.Pin = S7_Pin|S6_Pin|S5_Pin|S4_Pin
 8005a52:	f24f 0307 	movw	r3, #61447	; 0xf007
 8005a56:	60fb      	str	r3, [r7, #12]
	                            |S3_Pin|S2_Pin|S1_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	4619      	mov	r1, r3
 8005a66:	4835      	ldr	r0, [pc, #212]	; (8005b3c <sensores+0x148>)
 8005a68:	f7fb fad2 	bl	8001010 <HAL_GPIO_Init>
	    //SENSORES EN ALTO
	    HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a72:	4832      	ldr	r0, [pc, #200]	; (8005b3c <sensores+0x148>)
 8005a74:	f7fb fc56 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a7e:	482f      	ldr	r0, [pc, #188]	; (8005b3c <sensores+0x148>)
 8005a80:	f7fb fc50 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 8005a84:	2201      	movs	r2, #1
 8005a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a8a:	482c      	ldr	r0, [pc, #176]	; (8005b3c <sensores+0x148>)
 8005a8c:	f7fb fc4a 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, S4_Pin, GPIO_PIN_SET);
 8005a90:	2201      	movs	r2, #1
 8005a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a96:	4829      	ldr	r0, [pc, #164]	; (8005b3c <sensores+0x148>)
 8005a98:	f7fb fc44 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, S5_Pin, GPIO_PIN_SET);
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	4826      	ldr	r0, [pc, #152]	; (8005b3c <sensores+0x148>)
 8005aa2:	f7fb fc3f 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, S6_Pin, GPIO_PIN_SET);
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	4824      	ldr	r0, [pc, #144]	; (8005b3c <sensores+0x148>)
 8005aac:	f7fb fc3a 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, S7_Pin, GPIO_PIN_SET);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4821      	ldr	r0, [pc, #132]	; (8005b3c <sensores+0x148>)
 8005ab6:	f7fb fc35 	bl	8001324 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(S8_GPIO_Port, S8_Pin, GPIO_PIN_SET);
 8005aba:	2201      	movs	r2, #1
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ac2:	f7fb fc2f 	bl	8001324 <HAL_GPIO_WritePin>

	    /*Configure GPIO INPUT pin : S8_Pin */
	    GPIO_InitStruct.Pin = S8_Pin;
 8005ac6:	2340      	movs	r3, #64	; 0x40
 8005ac8:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(S8_GPIO_Port, &GPIO_InitStruct);
 8005ad2:	f107 030c 	add.w	r3, r7, #12
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005adc:	f7fb fa98 	bl	8001010 <HAL_GPIO_Init>

	    /*Configure GPIO INPUT pins : S7_Pin S6_Pin S5_Pin S4_Pin
	                             S3_Pin S2_Pin S1_Pin */
	    GPIO_InitStruct.Pin = S7_Pin|S6_Pin|S5_Pin|S4_Pin
 8005ae0:	f24f 0307 	movw	r3, #61447	; 0xf007
 8005ae4:	60fb      	str	r3, [r7, #12]
	                            |S3_Pin|S2_Pin|S1_Pin;
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	4619      	mov	r1, r3
 8005af4:	4811      	ldr	r0, [pc, #68]	; (8005b3c <sensores+0x148>)
 8005af6:	f7fb fa8b 	bl	8001010 <HAL_GPIO_Init>

		//LEER SENSORES
		for(int i=0; i<NUM_SENSORES ; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afe:	e012      	b.n	8005b26 <sensores+0x132>
		{
			sensores_leidos[i] = 1;
 8005b00:	4a0f      	ldr	r2, [pc, #60]	; (8005b40 <sensores+0x14c>)
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	2101      	movs	r1, #1
 8005b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sensor_timing[i] = TIME_OUT_BLANCO; //frecuencia 1M -- 500 es 0.5ms
 8005b0a:	4a0e      	ldr	r2, [pc, #56]	; (8005b44 <sensores+0x150>)
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
																//PERO SE DESCARGA EN LINEA A 0.25ms
			sensores_estado[i] = 1; //LINEA NEGRA
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <sensores+0x154>)
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<NUM_SENSORES ; i++)
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	3301      	adds	r3, #1
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	2b07      	cmp	r3, #7
 8005b2a:	dde9      	ble.n	8005b00 <sensores+0x10c>

		}
		TIM15->CNT = 0;
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <sensores+0x158>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

		while(( sensores_leidos[0] ||
 8005b32:	e0ba      	b.n	8005caa <sensores+0x2b6>
 8005b34:	20001030 	.word	0x20001030
 8005b38:	200010fc 	.word	0x200010fc
 8005b3c:	48000400 	.word	0x48000400
 8005b40:	200012b0 	.word	0x200012b0
 8005b44:	20001270 	.word	0x20001270
 8005b48:	20001250 	.word	0x20001250
 8005b4c:	40014000 	.word	0x40014000
								sensores_leidos[2] ||
								sensores_leidos[3] ||
								sensores_leidos[4] ||
								sensores_leidos[5]	) && TIM15->CNT < TIME_OUT_BLANCO)
				{
							if(!HAL_GPIO_ReadPin(GPIOB, S1_Pin) && sensores_leidos[0])
 8005b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b54:	4899      	ldr	r0, [pc, #612]	; (8005dbc <sensores+0x3c8>)
 8005b56:	f7fb fbcd 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <sensores+0x188>
 8005b60:	4b97      	ldr	r3, [pc, #604]	; (8005dc0 <sensores+0x3cc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <sensores+0x188>
							{
								 sensor_timing[0] = TIM15->CNT;
 8005b68:	4b96      	ldr	r3, [pc, #600]	; (8005dc4 <sensores+0x3d0>)
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	4a96      	ldr	r2, [pc, #600]	; (8005dc8 <sensores+0x3d4>)
 8005b6e:	6013      	str	r3, [r2, #0]
								 sensores_leidos[0] = 0;
 8005b70:	4b93      	ldr	r3, [pc, #588]	; (8005dc0 <sensores+0x3cc>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
								 sensores_estado[0] = 0;
 8005b76:	4b95      	ldr	r3, [pc, #596]	; (8005dcc <sensores+0x3d8>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
							}

							if(!HAL_GPIO_ReadPin(GPIOB, S2_Pin) && sensores_leidos[1])
 8005b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b80:	488e      	ldr	r0, [pc, #568]	; (8005dbc <sensores+0x3c8>)
 8005b82:	f7fb fbb7 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10d      	bne.n	8005ba8 <sensores+0x1b4>
 8005b8c:	4b8c      	ldr	r3, [pc, #560]	; (8005dc0 <sensores+0x3cc>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <sensores+0x1b4>
							{
								 sensor_timing[1] = TIM15->CNT;
 8005b94:	4b8b      	ldr	r3, [pc, #556]	; (8005dc4 <sensores+0x3d0>)
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	4a8b      	ldr	r2, [pc, #556]	; (8005dc8 <sensores+0x3d4>)
 8005b9a:	6053      	str	r3, [r2, #4]
								 sensores_leidos[1] = 0;
 8005b9c:	4b88      	ldr	r3, [pc, #544]	; (8005dc0 <sensores+0x3cc>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	605a      	str	r2, [r3, #4]
								 sensores_estado[1] = 0;
 8005ba2:	4b8a      	ldr	r3, [pc, #552]	; (8005dcc <sensores+0x3d8>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	605a      	str	r2, [r3, #4]

							}

								if(!HAL_GPIO_ReadPin(GPIOB, S3_Pin) && sensores_leidos[2])
 8005ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bac:	4883      	ldr	r0, [pc, #524]	; (8005dbc <sensores+0x3c8>)
 8005bae:	f7fb fba1 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <sensores+0x1e0>
 8005bb8:	4b81      	ldr	r3, [pc, #516]	; (8005dc0 <sensores+0x3cc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <sensores+0x1e0>
							{
								 sensor_timing[2] = TIM15->CNT;
 8005bc0:	4b80      	ldr	r3, [pc, #512]	; (8005dc4 <sensores+0x3d0>)
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	4a80      	ldr	r2, [pc, #512]	; (8005dc8 <sensores+0x3d4>)
 8005bc6:	6093      	str	r3, [r2, #8]
								 sensores_leidos[2] = 0;
 8005bc8:	4b7d      	ldr	r3, [pc, #500]	; (8005dc0 <sensores+0x3cc>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	609a      	str	r2, [r3, #8]
								 sensores_estado[2] = 0;
 8005bce:	4b7f      	ldr	r3, [pc, #508]	; (8005dcc <sensores+0x3d8>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	609a      	str	r2, [r3, #8]

							}

							if(!HAL_GPIO_ReadPin(GPIOB, S4_Pin) && sensores_leidos[3])
 8005bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005bd8:	4878      	ldr	r0, [pc, #480]	; (8005dbc <sensores+0x3c8>)
 8005bda:	f7fb fb8b 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10d      	bne.n	8005c00 <sensores+0x20c>
 8005be4:	4b76      	ldr	r3, [pc, #472]	; (8005dc0 <sensores+0x3cc>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <sensores+0x20c>
							{
								 sensor_timing[3] = TIM15->CNT;
 8005bec:	4b75      	ldr	r3, [pc, #468]	; (8005dc4 <sensores+0x3d0>)
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	4a75      	ldr	r2, [pc, #468]	; (8005dc8 <sensores+0x3d4>)
 8005bf2:	60d3      	str	r3, [r2, #12]
								 sensores_leidos[3] = 0;
 8005bf4:	4b72      	ldr	r3, [pc, #456]	; (8005dc0 <sensores+0x3cc>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60da      	str	r2, [r3, #12]
								 sensores_estado[3] = 0;
 8005bfa:	4b74      	ldr	r3, [pc, #464]	; (8005dcc <sensores+0x3d8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	60da      	str	r2, [r3, #12]
							}

							if(!HAL_GPIO_ReadPin(GPIOB, S5_Pin) && sensores_leidos[4])
 8005c00:	2104      	movs	r1, #4
 8005c02:	486e      	ldr	r0, [pc, #440]	; (8005dbc <sensores+0x3c8>)
 8005c04:	f7fb fb76 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <sensores+0x236>
 8005c0e:	4b6c      	ldr	r3, [pc, #432]	; (8005dc0 <sensores+0x3cc>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <sensores+0x236>
							{
								 sensor_timing[4] = TIM15->CNT;
 8005c16:	4b6b      	ldr	r3, [pc, #428]	; (8005dc4 <sensores+0x3d0>)
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	4a6b      	ldr	r2, [pc, #428]	; (8005dc8 <sensores+0x3d4>)
 8005c1c:	6113      	str	r3, [r2, #16]
								 sensores_leidos[4] = 0;
 8005c1e:	4b68      	ldr	r3, [pc, #416]	; (8005dc0 <sensores+0x3cc>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	611a      	str	r2, [r3, #16]
								 sensores_estado[4] = 0;
 8005c24:	4b69      	ldr	r3, [pc, #420]	; (8005dcc <sensores+0x3d8>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
							}

							if(!HAL_GPIO_ReadPin(GPIOB, S6_Pin) && sensores_leidos[5])
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4863      	ldr	r0, [pc, #396]	; (8005dbc <sensores+0x3c8>)
 8005c2e:	f7fb fb61 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <sensores+0x260>
 8005c38:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <sensores+0x3cc>)
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <sensores+0x260>
							{
								 sensor_timing[5] = TIM15->CNT;
 8005c40:	4b60      	ldr	r3, [pc, #384]	; (8005dc4 <sensores+0x3d0>)
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	4a60      	ldr	r2, [pc, #384]	; (8005dc8 <sensores+0x3d4>)
 8005c46:	6153      	str	r3, [r2, #20]
								 sensores_leidos[5] = 0;
 8005c48:	4b5d      	ldr	r3, [pc, #372]	; (8005dc0 <sensores+0x3cc>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	615a      	str	r2, [r3, #20]
								 sensores_estado[5] = 0;
 8005c4e:	4b5f      	ldr	r3, [pc, #380]	; (8005dcc <sensores+0x3d8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	615a      	str	r2, [r3, #20]

							}

							if(!HAL_GPIO_ReadPin(GPIOB, S7_Pin) && sensores_leidos[6])
 8005c54:	2101      	movs	r1, #1
 8005c56:	4859      	ldr	r0, [pc, #356]	; (8005dbc <sensores+0x3c8>)
 8005c58:	f7fb fb4c 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <sensores+0x28a>
 8005c62:	4b57      	ldr	r3, [pc, #348]	; (8005dc0 <sensores+0x3cc>)
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <sensores+0x28a>
							{
								 sensor_timing[6] = TIM15->CNT;
 8005c6a:	4b56      	ldr	r3, [pc, #344]	; (8005dc4 <sensores+0x3d0>)
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	4a56      	ldr	r2, [pc, #344]	; (8005dc8 <sensores+0x3d4>)
 8005c70:	6193      	str	r3, [r2, #24]
								 sensores_leidos[6] = 0;
 8005c72:	4b53      	ldr	r3, [pc, #332]	; (8005dc0 <sensores+0x3cc>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	619a      	str	r2, [r3, #24]
								 sensores_estado[6] = 0;
 8005c78:	4b54      	ldr	r3, [pc, #336]	; (8005dcc <sensores+0x3d8>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	619a      	str	r2, [r3, #24]

							}

							if(!HAL_GPIO_ReadPin(S8_GPIO_Port, S8_Pin) && sensores_leidos[7])
 8005c7e:	2140      	movs	r1, #64	; 0x40
 8005c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c84:	f7fb fb36 	bl	80012f4 <HAL_GPIO_ReadPin>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10d      	bne.n	8005caa <sensores+0x2b6>
 8005c8e:	4b4c      	ldr	r3, [pc, #304]	; (8005dc0 <sensores+0x3cc>)
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <sensores+0x2b6>
							{
								 sensor_timing[7] = TIM15->CNT;
 8005c96:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <sensores+0x3d0>)
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	4a4b      	ldr	r2, [pc, #300]	; (8005dc8 <sensores+0x3d4>)
 8005c9c:	61d3      	str	r3, [r2, #28]
								 sensores_leidos[7] = 0;
 8005c9e:	4b48      	ldr	r3, [pc, #288]	; (8005dc0 <sensores+0x3cc>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	61da      	str	r2, [r3, #28]
								 sensores_estado[7] = 0;
 8005ca4:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <sensores+0x3d8>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
		while(( sensores_leidos[0] ||
 8005caa:	4b45      	ldr	r3, [pc, #276]	; (8005dc0 <sensores+0x3cc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d113      	bne.n	8005cda <sensores+0x2e6>
								sensores_leidos[1] ||
 8005cb2:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <sensores+0x3cc>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
		while(( sensores_leidos[0] ||
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <sensores+0x2e6>
								sensores_leidos[2] ||
 8005cba:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <sensores+0x3cc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
								sensores_leidos[1] ||
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <sensores+0x2e6>
								sensores_leidos[3] ||
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <sensores+0x3cc>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
								sensores_leidos[2] ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <sensores+0x2e6>
								sensores_leidos[4] ||
 8005cca:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <sensores+0x3cc>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
								sensores_leidos[3] ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <sensores+0x2e6>
								sensores_leidos[5]	) && TIM15->CNT < TIME_OUT_BLANCO)
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <sensores+0x3cc>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
								sensores_leidos[4] ||
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <sensores+0x2f2>
								sensores_leidos[5]	) && TIM15->CNT < TIME_OUT_BLANCO)
 8005cda:	4b3a      	ldr	r3, [pc, #232]	; (8005dc4 <sensores+0x3d0>)
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ce2:	f4ff af35 	bcc.w	8005b50 <sensores+0x15c>

							}
					}

					vel_setup.tipopista = 2; //PISTA BLANCA
 8005ce6:	4b3a      	ldr	r3, [pc, #232]	; (8005dd0 <sensores+0x3dc>)
 8005ce8:	2202      	movs	r2, #2
 8005cea:	619a      	str	r2, [r3, #24]


					if(vel_setup.tipopista == 1) //LINEA
 8005cec:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <sensores+0x3dc>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d119      	bne.n	8005d28 <sensores+0x334>
					{
						for(int i=0; i<NUM_SENSORES ; i++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf8:	e013      	b.n	8005d22 <sensores+0x32e>
							{
								if(sensores_estado[i] == 1)
 8005cfa:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <sensores+0x3d8>)
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <sensores+0x31e>
								   sensores_estado[i] = 0;
 8005d06:	4a31      	ldr	r2, [pc, #196]	; (8005dcc <sensores+0x3d8>)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005d10:	e004      	b.n	8005d1c <sensores+0x328>
								else
								   sensores_estado[i] = 1;
 8005d12:	4a2e      	ldr	r2, [pc, #184]	; (8005dcc <sensores+0x3d8>)
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	2101      	movs	r1, #1
 8005d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for(int i=0; i<NUM_SENSORES ; i++)
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	dde8      	ble.n	8005cfa <sensores+0x306>
							}
					}
					 suma = 0;
 8005d28:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <sensores+0x3e0>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
					 num_sensors = 0;
 8005d2e:	4b2a      	ldr	r3, [pc, #168]	; (8005dd8 <sensores+0x3e4>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

					for(int i=0; i<NUM_SENSORES ; i++)
 8005d34:	2300      	movs	r3, #0
 8005d36:	623b      	str	r3, [r7, #32]
 8005d38:	e016      	b.n	8005d68 <sensores+0x374>
						{
							if(sensores_estado[i] == 1)
 8005d3a:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <sensores+0x3d8>)
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d10d      	bne.n	8005d62 <sensores+0x36e>
								{
									suma += Sensores_peso[i];
 8005d46:	4a25      	ldr	r2, [pc, #148]	; (8005ddc <sensores+0x3e8>)
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d4e:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <sensores+0x3e0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4413      	add	r3, r2
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <sensores+0x3e0>)
 8005d56:	6013      	str	r3, [r2, #0]
									num_sensors++;
 8005d58:	4b1f      	ldr	r3, [pc, #124]	; (8005dd8 <sensores+0x3e4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <sensores+0x3e4>)
 8005d60:	6013      	str	r3, [r2, #0]
					for(int i=0; i<NUM_SENSORES ; i++)
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	3301      	adds	r3, #1
 8005d66:	623b      	str	r3, [r7, #32]
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	2b07      	cmp	r3, #7
 8005d6c:	dde5      	ble.n	8005d3a <sensores+0x346>
								 }
						}

					if(num_sensors == 0) //Si no lee ningun mantiene el anterior
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <sensores+0x3e4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d115      	bne.n	8005da2 <sensores+0x3ae>
						{
							if(vel.sensores > 10)
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <sensores+0x3ec>)
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	2b0a      	cmp	r3, #10
 8005d7c:	dd03      	ble.n	8005d86 <sensores+0x392>
								{
									vel.sensores = 45; //MAXIMO ERROR
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <sensores+0x3ec>)
 8005d80:	222d      	movs	r2, #45	; 0x2d
 8005d82:	635a      	str	r2, [r3, #52]	; 0x34
 8005d84:	e015      	b.n	8005db2 <sensores+0x3be>
								}
							else if(vel.sensores < -10)
 8005d86:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <sensores+0x3ec>)
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	f113 0f0a 	cmn.w	r3, #10
 8005d8e:	da04      	bge.n	8005d9a <sensores+0x3a6>
								{
									vel.sensores = -45;
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <sensores+0x3ec>)
 8005d92:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8005d96:	635a      	str	r2, [r3, #52]	; 0x34
 8005d98:	e00b      	b.n	8005db2 <sensores+0x3be>
								}
							else //PERDIDA DE LINEA DE FRENTE
								{
									vel.sensores = 0;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <sensores+0x3ec>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8005da0:	e007      	b.n	8005db2 <sensores+0x3be>
								}
						  }
					else
						{
							vel.sensores = suma/num_sensors;
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <sensores+0x3e0>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <sensores+0x3e4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <sensores+0x3ec>)
 8005db0:	6353      	str	r3, [r2, #52]	; 0x34
						}




    osDelay(1);
 8005db2:	2001      	movs	r0, #1
 8005db4:	f7fe f981 	bl	80040ba <osDelay>
	    GPIO_InitStruct.Pin = S8_Pin;
 8005db8:	e63e      	b.n	8005a38 <sensores+0x44>
 8005dba:	bf00      	nop
 8005dbc:	48000400 	.word	0x48000400
 8005dc0:	200012b0 	.word	0x200012b0
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	20001270 	.word	0x20001270
 8005dcc:	20001250 	.word	0x20001250
 8005dd0:	200011dc 	.word	0x200011dc
 8005dd4:	20000fa4 	.word	0x20000fa4
 8005dd8:	20000fa8 	.word	0x20000fa8
 8005ddc:	20000010 	.word	0x20000010
 8005de0:	200010fc 	.word	0x200010fc

08005de4 <Sensores_Calibracion_Backgound>:
  /* USER CODE END sensores */
}


void Sensores_Calibracion_Backgound(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0

for(int ind=0; ind < 100 ; ind ++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	e01d      	b.n	8005e2c <Sensores_Calibracion_Backgound+0x48>
			{
				for(int is=0; is < NUM_SENSORES ; is ++) //Leer los sensores y guardar los valores iniciales
 8005df0:	2300      	movs	r3, #0
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	e011      	b.n	8005e1a <Sensores_Calibracion_Backgound+0x36>
					{
						 vel.fondo_pista[is] += sensor_timing[is];
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <Sensores_Calibracion_Backgound+0x84>)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	3316      	adds	r3, #22
 8005dfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e00:	491a      	ldr	r1, [pc, #104]	; (8005e6c <Sensores_Calibracion_Backgound+0x88>)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e08:	441a      	add	r2, r3
 8005e0a:	4917      	ldr	r1, [pc, #92]	; (8005e68 <Sensores_Calibracion_Backgound+0x84>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	3316      	adds	r3, #22
 8005e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int is=0; is < NUM_SENSORES ; is ++) //Leer los sensores y guardar los valores iniciales
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b07      	cmp	r3, #7
 8005e1e:	ddea      	ble.n	8005df6 <Sensores_Calibracion_Backgound+0x12>
					}
					osDelay(5);
 8005e20:	2005      	movs	r0, #5
 8005e22:	f7fe f94a 	bl	80040ba <osDelay>
for(int ind=0; ind < 100 ; ind ++)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b63      	cmp	r3, #99	; 0x63
 8005e30:	ddde      	ble.n	8005df0 <Sensores_Calibracion_Backgound+0xc>
			}

	for(int is=0; is < NUM_SENSORES ; is ++) //Leer los sensores y guardar los valores promedio de fondo de pista
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	e010      	b.n	8005e5a <Sensores_Calibracion_Backgound+0x76>
		{
			 vel.fondo_pista[is] = vel.fondo_pista[is]/100;
 8005e38:	4a0b      	ldr	r2, [pc, #44]	; (8005e68 <Sensores_Calibracion_Backgound+0x84>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3316      	adds	r3, #22
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <Sensores_Calibracion_Backgound+0x8c>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095a      	lsrs	r2, r3, #5
 8005e4a:	4907      	ldr	r1, [pc, #28]	; (8005e68 <Sensores_Calibracion_Backgound+0x84>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3316      	adds	r3, #22
 8005e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int is=0; is < NUM_SENSORES ; is ++) //Leer los sensores y guardar los valores promedio de fondo de pista
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3301      	adds	r3, #1
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b07      	cmp	r3, #7
 8005e5e:	ddeb      	ble.n	8005e38 <Sensores_Calibracion_Backgound+0x54>
	  }

}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	200010fc 	.word	0x200010fc
 8005e6c:	20001270 	.word	0x20001270
 8005e70:	51eb851f 	.word	0x51eb851f

08005e74 <Sensores_Calibracion_Line>:


void Sensores_Calibracion_Line(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0

	for(int is=0; is < NUM_SENSORES ; is ++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e013      	b.n	8005ea8 <Sensores_Calibracion_Line+0x34>
		{
			vel.tr_sens[is]  = 0;
 8005e80:	4a3f      	ldr	r2, [pc, #252]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	330e      	adds	r3, #14
 8005e86:	2100      	movs	r1, #0
 8005e88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			max_sens[is]     = 0;
 8005e8c:	4a3d      	ldr	r2, [pc, #244]	; (8005f84 <Sensores_Calibracion_Line+0x110>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2100      	movs	r1, #0
 8005e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			min_sens[is]     = 10000;
 8005e96:	4a3c      	ldr	r2, [pc, #240]	; (8005f88 <Sensores_Calibracion_Line+0x114>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f242 7110 	movw	r1, #10000	; 0x2710
 8005e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int is=0; is < NUM_SENSORES ; is ++)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b07      	cmp	r3, #7
 8005eac:	dde8      	ble.n	8005e80 <Sensores_Calibracion_Line+0xc>
		}

	 for(int ind=0; ind < 2000 ; ind ++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	e039      	b.n	8005f28 <Sensores_Calibracion_Line+0xb4>
				 {
					  for(int is=0; is < NUM_SENSORES ; is ++) //Leer los sensores y guardar el maximo, el minimo y promedio
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	e02d      	b.n	8005f16 <Sensores_Calibracion_Line+0xa2>
				      {
								  if(sensor_timing[is] > max_sens[is])
 8005eba:	4a34      	ldr	r2, [pc, #208]	; (8005f8c <Sensores_Calibracion_Line+0x118>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ec2:	4930      	ldr	r1, [pc, #192]	; (8005f84 <Sensores_Calibracion_Line+0x110>)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d907      	bls.n	8005ede <Sensores_Calibracion_Line+0x6a>
										max_sens[is] = sensor_timing[is];
 8005ece:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <Sensores_Calibracion_Line+0x118>)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ed6:	492b      	ldr	r1, [pc, #172]	; (8005f84 <Sensores_Calibracion_Line+0x110>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

								  if(sensor_timing[is] < min_sens[is])
 8005ede:	4a2b      	ldr	r2, [pc, #172]	; (8005f8c <Sensores_Calibracion_Line+0x118>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ee6:	4928      	ldr	r1, [pc, #160]	; (8005f88 <Sensores_Calibracion_Line+0x114>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d207      	bcs.n	8005f02 <Sensores_Calibracion_Line+0x8e>
										 min_sens[is] = sensor_timing[is];
 8005ef2:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <Sensores_Calibracion_Line+0x118>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005efa:	4923      	ldr	r1, [pc, #140]	; (8005f88 <Sensores_Calibracion_Line+0x114>)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

					              //vel.tr_sens[is] = (min_sens[is] + max_sens[is])/2;
									      vel.tr_sens[is] = TIME_OUT_BLANCO - 10;
 8005f02:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	330e      	adds	r3, #14
 8005f08:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8005f0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  for(int is=0; is < NUM_SENSORES ; is ++) //Leer los sensores y guardar el maximo, el minimo y promedio
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3301      	adds	r3, #1
 8005f14:	607b      	str	r3, [r7, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b07      	cmp	r3, #7
 8005f1a:	ddce      	ble.n	8005eba <Sensores_Calibracion_Line+0x46>
				      }

						 osDelay(2);
 8005f1c:	2002      	movs	r0, #2
 8005f1e:	f7fe f8cc 	bl	80040ba <osDelay>
	 for(int ind=0; ind < 2000 ; ind ++)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	3301      	adds	r3, #1
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f2e:	dbc1      	blt.n	8005eb4 <Sensores_Calibracion_Line+0x40>
				}

		//definir color de PISTA
				if ((vel.fondo_pista[0] > vel.tr_sens[0]) && (vel.fondo_pista[NUM_SENSORES-1] > vel.tr_sens[NUM_SENSORES-1]))
 8005f30:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d909      	bls.n	8005f50 <Sensores_Calibracion_Line+0xdc>
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f3e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d903      	bls.n	8005f50 <Sensores_Calibracion_Line+0xdc>
				{
				     vel_setup.tipopista = 1; // pista < negro
 8005f48:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <Sensores_Calibracion_Line+0x11c>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	619a      	str	r2, [r3, #24]
 8005f4e:	e012      	b.n	8005f76 <Sensores_Calibracion_Line+0x102>
				}

				else if ((vel.fondo_pista[0] < vel.tr_sens[0]) && (vel.fondo_pista[NUM_SENSORES-1] < vel.tr_sens[NUM_SENSORES-1]))
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d209      	bcs.n	8005f70 <Sensores_Calibracion_Line+0xfc>
 8005f5c:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <Sensores_Calibracion_Line+0x10c>)
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d203      	bcs.n	8005f70 <Sensores_Calibracion_Line+0xfc>
				{
				     vel_setup.tipopista = 2; // pista > Blanco
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <Sensores_Calibracion_Line+0x11c>)
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	619a      	str	r2, [r3, #24]
 8005f6e:	e002      	b.n	8005f76 <Sensores_Calibracion_Line+0x102>
				}
	      else
				{
					vel_setup.tipopista = 2; //SET MANUAL
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <Sensores_Calibracion_Line+0x11c>)
 8005f72:	2202      	movs	r2, #2
 8005f74:	619a      	str	r2, [r3, #24]
				}

}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200010fc 	.word	0x200010fc
 8005f84:	20001210 	.word	0x20001210
 8005f88:	20001290 	.word	0x20001290
 8005f8c:	20001270 	.word	0x20001270
 8005f90:	200011dc 	.word	0x200011dc

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4e0d      	ldr	r6, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1ba4      	subs	r4, r4, r6
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	42a5      	cmp	r5, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4e0b      	ldr	r6, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f000 f820 	bl	8005fec <_init>
 8005fac:	1ba4      	subs	r4, r4, r6
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	42a5      	cmp	r5, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fbc:	4798      	blx	r3
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fc6:	4798      	blx	r3
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	080060dc 	.word	0x080060dc
 8005fd0:	080060dc 	.word	0x080060dc
 8005fd4:	080060dc 	.word	0x080060dc
 8005fd8:	080060e0 	.word	0x080060e0

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr
